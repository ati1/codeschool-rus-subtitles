1
00:00:00,330 --> 00:00:01,890
Привет. Я Грег Полак,
и вы смотрите

2
00:00:01,890 --> 00:00:03,620
Rails для Зомби.

3
00:00:17,990 --> 00:00:19,730
Что бы это видео имело
для вас смысл, вам

4
00:00:19,730 --> 00:00:22,120
небходимо знать некоторые
вещи о языке Ruby.

5
00:00:22,120 --> 00:00:24,760
Если вы пока ещё вообще
ничего не знаете, то поставьте
это видео на паузу и зайдите

6
00:00:24,760 --> 00:00:28,250
на сайт tryruby.org, поделайте там
упражнения и потом возвращайтесь
обратно

7
00:00:28,250 --> 00:00:30,360
и начинайте смотреть.

8
00:00:30,360 --> 00:00:32,090
Итак, в первом эпизоде,
мы глубоко окунёмся

9
00:00:32,090 --> 00:00:34,120
в модель CRUD.

10
00:00:34,120 --> 00:00:35,810
Мы собираемся
поговорить о CRUD.

11
00:00:35,810 --> 00:00:38,880
Теперь, потерпите меня, если вы
эксперт в некоторых

12
00:00:38,880 --> 00:00:40,770
языках и знаете их
концепции.

13
00:00:40,770 --> 00:00:42,700
Мы перейдём к продвинутым штукам
достаточно скоро, но нам надо

14
00:00:42,700 --> 00:00:44,940
быть уверенными в том, что мы
все находимся на одной волне.

15
00:00:44,940 --> 00:00:48,220
Итак, мы собираемся создать
Twitter для Зомби.

16
00:00:48,220 --> 00:00:49,920
Вот это ваше приложение.

17
00:00:49,920 --> 00:00:51,910
Если вы так и не поняли почему?
То возвращайтесь на первую страницу

18
00:00:51,910 --> 00:00:52,770
и заново смотрите интро.

19
00:00:52,770 --> 00:00:56,460
Но сейчас,
давайте начнём погружение.

20
00:00:56,460 --> 00:00:59,980
Итак, у нас есть наша первая
база данных.

21
00:00:59,980 --> 00:01:01,550
Выглядит она, как
таблица.

22
00:01:01,550 --> 00:01:03,530
Мы называем это твитами.

23
00:01:03,530 --> 00:01:09,020
Она состоит из четырёх строк,
и трёх столбцов.

24
00:01:09,020 --> 00:01:11,090
Теперь, мы можем назвать
каждую колонку.

25
00:01:11,090 --> 00:01:13,220
Первая, это ID.

26
00:01:13,220 --> 00:01:15,260
Вторая, статус.

27
00:01:15,260 --> 00:01:17,690
И в третьей будут наши
зомби,

28
00:01:17,690 --> 00:01:20,840
например Ash, Bob или Jim.

29
00:01:20,840 --> 00:01:22,280
Это наши зомби.

30
00:01:22,280 --> 00:01:24,650
Теперь, нашим первым испытанием
 для зомби будет

31
00:01:24,650 --> 00:01:28,270
получить хэш твита
с ID номер 3.

32
00:01:28,270 --> 00:01:30,150
Сейчас, я не буду показывать
вам решения.

33
00:01:30,150 --> 00:01:33,100
Сперва я собираюсь
показать результат

34
00:01:33,100 --> 00:01:34,540
того, что мы хотим получить
из базы данных.

35
00:01:34,540 --> 00:01:36,780
В данном случае, нам
нужен хэш,

36
00:01:36,780 --> 00:01:38,030
который выглядит
примерно так.

37
00:01:40,550 --> 00:01:42,920
Сейчас вот, вы уже должны понимать
что такое хэш, но

38
00:01:42,920 --> 00:01:44,430
тут вот небольшое пояснение.

39
00:01:44,430 --> 00:01:47,942
Итак, если мы сделаем puts b[:status],
то обратно получим "Я только что

40
00:01:47,942 --> 00:01:49,430
съел немного очень вкусныз мозгов."

41
00:01:49,430 --> 00:01:52,370
Если мы сделаем puts b[:zombie],
то это врнёт нам "Jim."

42
00:01:52,370 --> 00:01:54,470
И если мы делаем это внизу,
то обратно получим

43
00:01:54,470 --> 00:01:57,690
"Jim сказал, я поел
вкусных мозгов."

44
00:01:57,690 --> 00:02:02,850
Потому что, ну вы в курсе, 
зомби любят есть мозги.

45
00:02:02,850 --> 00:02:04,730
Теперь вернёмя к
нашей базе данных

46
00:02:04,730 --> 00:02:07,430
и нашей задаче.

47
00:02:07,430 --> 00:02:08,800
Итак, вот она опять наша
задача.

48
00:02:08,800 --> 00:02:11,885
Сейчас я покажу вам
по сути решение. Код,

49
00:02:11,885 --> 00:02:12,890
который мы захотим написать.

50
00:02:12,890 --> 00:02:16,730
Мы захотим написать
t = Tweet.find(3)

51
00:02:16,730 --> 00:02:19,470
Итак, что должно произойти,
нам вернется хэш и мы

52
00:02:19,470 --> 00:02:23,990
сможем сделать puts t[:id], 
получить третий,
puts t[:status] выведет

53
00:02:23,990 --> 00:02:27,900
"Я только что съел вкусных мозгов,"
и далее puts t[:zombie] выдаст

54
00:02:27,900 --> 00:02:29,850
нам "Jim."

55
00:02:29,850 --> 00:02:33,470
Что ж, есть и другой способ
как можно написать это в Rails.

56
00:02:33,470 --> 00:02:38,050
вместо puts t[:id], мы можем
сделать puts t.id.

57
00:02:38,050 --> 00:02:42,790
Вместо puts t[:status], сделаем puts
t.status,

58
00:02:42,790 --> 00:02:43,720
и так далее.

59
00:02:43,720 --> 00:02:46,780
Итак мы можем использовать это
 в решении нашей задачи
вместо использования

60
00:02:46,780 --> 00:02:48,620
хэш ключей.

61
00:02:48,620 --> 00:02:50,140
Вот как может выглядеть
наше решение

62
00:02:50,140 --> 00:02:51,610
в этой части кода.

63
00:02:51,610 --> 00:02:53,130
Существует соглашение в Rails,

64
00:02:53,130 --> 00:02:54,590
на которое нужно
обратить внимание.

65
00:02:54,590 --> 00:02:59,330
Заметьте, что тут у 
нас заглавная T в Tweet.

66
00:02:59,330 --> 00:03:01,620
И что происходит на 
заднем плане это

67
00:03:01,620 --> 00:03:04,350
приводится к маленькой букве,
расчленяет его, а потом

68
00:03:04,350 --> 00:03:09,170
ищет таблицу под названием
tweets в нашей базе данных.

69
00:03:09,170 --> 00:03:12,080
It's time to jump
in to the CRUD.

70
00:03:12,080 --> 00:03:17,280
И под CRUD, я имею ввиду
Create, Read, Update и Delete.

71
00:03:17,280 --> 00:03:19,880
Теперь давайте рассмотрим
как с этим работать в

72
00:03:19,880 --> 00:03:21,780
нашем приложении Rails.

73
00:03:21,780 --> 00:03:24,920
Первое, в create,
мы делаем Tweet.new

74
00:03:24,920 --> 00:03:27,400
Потом мы можем установить статус
и вызвать t.save

75
00:03:27,400 --> 00:03:29,550
что бы всё это дело сохранить.

76
00:03:29,550 --> 00:03:33,230
Что бы сделать reading, мы затем делаем
Tweet.find(3), прямо как вы

77
00:03:33,230 --> 00:03:34,800
видели это, мгновение назад.

78
00:03:34,800 --> 00:03:37,250
Для updating, мы найдём
этот tweet.

79
00:03:37,250 --> 00:03:41,070
Потом мы можем установить
значение и сохранить.

80
00:03:41,070 --> 00:03:44,850
А для delete, мы можем найти
 tweet и вызвать t.destroy

81
00:03:44,850 --> 00:03:47,460
что бы стереть его
из базы данных.

82
00:03:47,460 --> 00:03:49,480
Теперь давайте остановимся
на каждом из пунктов более

83
00:03:49,480 --> 00:03:52,550
подробно и я покажу вам
немного другой синтаксис.

84
00:03:52,550 --> 00:03:56,020
Но для начала, мы делаем create
Заметьте, что мы не задаём ID

85
00:03:56,020 --> 00:03:57,680
объекта тут.

86
00:03:57,680 --> 00:04:00,280
Это потому что Rails позаботится
об этом для нас

87
00:04:00,280 --> 00:04:02,350
и правильно переберет ID
и затем

88
00:04:02,350 --> 00:04:04,220
разместит их в базе данных.

89
00:04:04,220 --> 00:04:07,240
Другой способ создания нового
твита, это просто послать

90
00:04:07,240 --> 00:04:10,730
в хэше то, что мы хотим
задать.

91
00:04:10,730 --> 00:04:12,700
Затем мы можем это сохранить.

92
00:04:12,700 --> 00:04:15,520
Мы так же можем записать
в одну строку, вызвав

93
00:04:15,520 --> 00:04:16,649
Tweet.create.

94
00:04:16,649 --> 00:04:19,269
И это установит все
атрибуты

95
00:04:19,269 --> 00:04:23,190
и сохранит объект.

96
00:04:23,190 --> 00:04:26,270
Следующий шаг, для чтения.
Существует множество способов
как считывать данные

97
00:04:26,270 --> 00:04:27,610
из базы данных.

98
00:04:27,610 --> 00:04:30,550
Мы можем найти нужный
item (элемент) с ID номером.

99
00:04:30,550 --> 00:04:34,110
Мы можем найти кучу элементов и
это вернёт нам массив.

100
00:04:34,110 --> 00:04:35,530
Мы можем найти самый первый.

101
00:04:35,530 --> 00:04:37,160
Можем найти последний.

102
00:04:37,160 --> 00:04:38,840
Мы можем найти их все.

103
00:04:38,840 --> 00:04:40,160
Можем их сосчитать.

104
00:04:40,160 --> 00:04:42,520
И, интересный момент с
подсчётом, заключается в том

105
00:04:42,520 --> 00:04:43,980
что он в общем-то
происходит правильным образом.

106
00:04:43,980 --> 00:04:45,930
Он не будет вытаскивать всё из,
базы данных

107
00:04:45,930 --> 00:04:47,450
а потом всё это дело считать.

108
00:04:47,450 --> 00:04:49,540
На самом деле, он делает
подсчёт запросов к

109
00:04:49,540 --> 00:04:51,260
базе и возвращает
это число.

110
00:04:51,260 --> 00:04:53,670
Мы так же можем получить всех
зомби и расположить их

111
00:04:53,670 --> 00:04:54,900
по их зомби именам.

112
00:04:54,900 --> 00:04:56,800
Мы можем пограничится числом 10.

113
00:04:56,800 --> 00:04:58,900
Мы можем сказать "дай нам всех 
зомби именем которых

114
00:04:58,900 --> 00:05:00,380
является Ash."

115
00:05:00,380 --> 00:05:02,620
Или мы можем собрать эти
различные методы вместе

116
00:05:02,620 --> 00:05:06,410
и сделать то, что прянто называть
вызовом методов по цепочки 
(call method chaining).

117
00:05:06,410 --> 00:05:08,230
Следующим шагом,
 нужно сделать update.

118
00:05:08,230 --> 00:05:10,510
Итак, вы помните, что вместе с update,
мы находим tweet,

119
00:05:10,510 --> 00:05:11,940
устанавливаем что-нибудь,
и затем сохраняем.

120
00:05:11,940 --> 00:05:16,000
Как альтернатива, мы можем установить
значение атрибутов и послать их

121
00:05:16,000 --> 00:05:18,580
в хэше, а потом сохранить.

122
00:05:18,580 --> 00:05:21,730
Мы так же можем вызвать
t.update_attributes, что не только

123
00:05:21,730 --> 00:05:26,540
установит items,
но и так же сохранит их.

124
00:05:26,540 --> 00:05:29,460
Следующий шаг destroy, потому что
зомби нравится  уничтожать

125
00:05:29,460 --> 00:05:31,490
вещи, в особенности мозги.

126
00:05:31,490 --> 00:05:34,830
Итак, вы видели ранее, как мы 
находили item и уничтожали его.

127
00:05:34,830 --> 00:05:38,750
Мы так же можем записать
это в одну строку.

128
00:05:38,750 --> 00:05:41,930
И наконец, если вы хотите
уничтожить все твиты, то

129
00:05:41,930 --> 00:05:45,830
нужно просто вызвать
Tweet.destroy_all

130
00:05:45,830 --> 00:05:47,460
Итак, мы уже добрались до
зомби лабораторки 1.

131
00:05:47,460 --> 00:05:49,950
Это то самое место, где вы
начинаете кодить и применять

132
00:05:49,950 --> 00:05:51,370
всё, чему вы научились.

133
00:05:51,370 --> 00:05:53,790
Итак, пойдите и повеселитесь
со своими новыми друзьями Зомби.

