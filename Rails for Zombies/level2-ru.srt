1
00:00:00,900 --> 00:00:03,030
Я Грег Полак, и вы
смотрите Rails для Зомби,

2
00:00:03,030 --> 00:00:04,790
Эпизод два.

3
00:00:18,530 --> 00:00:20,080
Во втором эпизоде, мы
рассмотрим

4
00:00:20,080 --> 00:00:23,780
конечно же, модели.

5
00:00:23,780 --> 00:00:27,050
Итак, в предыдущей главе,
у нас был вот такой кусоче кода

6
00:00:27,050 --> 00:00:28,040
Tweet.find(3)

7
00:00:28,040 --> 00:00:32,320
И, каким-то образом
оно работало с нашей
таблицей в базе данных

8
00:00:32,320 --> 00:00:34,950
Но тут, очевидно,
есть пробел между

9
00:00:34,950 --> 00:00:37,960
двумя кусками кода, которые
накладываются один на другой.

10
00:00:37,960 --> 00:00:39,800
И вот тут вступают в дело
модели.

11
00:00:39,800 --> 00:00:43,790
В нашем случае, у нас есть модель
Tweet, котороая ни что иное, как

12
00:00:43,790 --> 00:00:45,580
обычный класс Ruby.

13
00:00:45,580 --> 00:00:50,830
Итак, что тут происходит, 
когда мы вызываем наш Tweet?

14
00:00:50,830 --> 00:00:54,420
Он будет искать в этом
Tweet классе.

15
00:00:54,420 --> 00:00:57,020
Который наследуется от
ActiveRecord::Base.

16
00:00:57,020 --> 00:00:59,740
По сути, происходит наложение
класса на таблицу.

17
00:00:59,740 --> 00:01:02,440
В общем он проверит на наличие


18
00:01:02,440 --> 00:01:06,730
таблиц tweets,
прямо как здесь.

19
00:01:06,730 --> 00:01:08,710
Давайте разберемся
что происходит, когда

20
00:01:08,710 --> 00:01:11,160
выполняется этот find код.

21
00:01:11,160 --> 00:01:13,080
Итак я вызываю
Tweet.find(3)

22
00:01:13,080 --> 00:01:15,630
Tweet в этом случае класс.

23
00:01:15,630 --> 00:01:18,210
Мы вызываем метод, находим
3 в классе, который пойдёт

24
00:01:18,210 --> 00:01:21,220
в базу данных, найдёт
строку содержащую

25
00:01:21,220 --> 00:01:23,070
Tweet с ID равным 3.

26
00:01:23,070 --> 00:01:27,170
И затем заполнит экземпляр
этого Tweet, положит эти

27
00:01:27,170 --> 00:01:31,960
данные в объект, и затем поместит
всё это в переменную.

28
00:01:31,960 --> 00:01:34,580
Теперь, вы могли заметить в 
упражнении 1, что есть возможность

29
00:01:34,580 --> 00:01:37,390
создать zombie, которые не
содержат данных.

30
00:01:37,390 --> 00:01:40,675
И в нашем случае тут, мы можем
создать Tweet без данных внутри

31
00:01:40,675 --> 00:01:42,520
Что не есть хорошо.

32
00:01:42,520 --> 00:01:47,340
Нам очевидно нужны какие-нибудь
способы валидации нашей модели.

33
00:01:47,340 --> 00:01:50,530
Мы можем сделать это в Rails
добавив немного кода.

34
00:01:50,530 --> 00:01:54,240
Вот здесь, в нашем классе Tweet, мы можем
добавить валидацию

35
00:01:54,240 --> 00:01:58,050
статуса, что бы быть убедиться
что статус попадёт в модель

36
00:01:58,050 --> 00:01:59,350
раньше чем будет сохранение.

37
00:01:59,350 --> 00:02:02,660
И если нам нужно проверить наш
новый класс и мы бы сделали
 t = Tweet.new,

38
00:02:02,660 --> 00:02:05,950
мы бы вернулись обратно
к объекту Tweet 

39
00:02:05,950 --> 00:02:07,260
который пока ещё
не был сохранён.

40
00:02:07,260 --> 00:02:09,000
Мы вызываем t.save на нём.

41
00:02:09,000 --> 00:02:11,710
Это вернёт false,
потому, что это не может быть

42
00:02:11,710 --> 00:02:15,030
сохранено в базу, потому что это
не проходит валидацию.

43
00:02:15,030 --> 00:02:17,920
Если мы выозовем t.errors, то
можем получить хэш

44
00:02:17,920 --> 00:02:19,840
ошибок, которые он выдаст.

45
00:02:19,840 --> 00:02:22,820
Если мы выполним t.errors[:status]
это конкретный ключ

46
00:02:22,820 --> 00:02:26,440
который вернёт
конкретную ошибку.

47
00:02:26,440 --> 00:02:29,690
Rails по умолчанию идёт
с куче валидаций, котоые

48
00:02:29,690 --> 00:02:32,890
можно использовать, для нумерования,
для проверки на уникальность,

49
00:02:32,890 --> 00:02:36,010
подтверждения, доступности,
длинну, формат,

50
00:02:36,010 --> 00:02:38,350
и так далее, и так далее.

51
00:02:38,350 --> 00:02:40,870
В Rails 3, у нас теперь есть
новый синтаксис для

52
00:02:40,870 --> 00:02:41,710
валидаций.

53
00:02:41,710 --> 00:02:44,780
Вместо того, что бы делать их в одну
строку за раз, мы можем

54
00:02:44,780 --> 00:02:48,480
сделать так
validates :status, :presence => true.

55
00:02:48,480 --> 00:02:52,850
Итак, тут у нас атрибут
и валидация.

56
00:02:52,850 --> 00:02:57,730
Мы так же можем сделать так


57
00:02:57,730 --> 00:03:00,290
Но, конечно же, что бы всё это
упростить, мы можем написать

58
00:03:00,290 --> 00:03:03,190
всё в одну линию.

59
00:03:03,190 --> 00:03:05,870
Тут можно увидеть

60
00:03:05,870 --> 00:03:08,830
новый синтаксис.

61
00:03:08,830 --> 00:03:11,390
Теперь самое время
поговорить об отношениях

62
00:03:11,390 --> 00:03:15,030
потому, что они всегда
с ними имеешь дело постоянно

63
00:03:15,030 --> 00:03:17,420
вам нужно много таблиц
и у них есть много разных

64
00:03:17,420 --> 00:03:18,410
отношений друг с другом.

65
00:03:18,410 --> 00:03:20,830
Итак, как вы могли видеть
в предыдущем примере,  you might

66
00:03:20,830 --> 00:03:24,720
у Зомби Ash
есть два разных твита,

67
00:03:24,720 --> 00:03:26,700
и мы видели его имя
дважды.

68
00:03:26,700 --> 00:03:29,140
Это очевидно
не очень эффективно.

69
00:03:29,140 --> 00:03:31,760
Что ж, мы собираемся
разделить всё это дело

70
00:03:31,760 --> 00:03:35,410
на две разные зомби таблицы.

71
00:03:35,410 --> 00:03:38,820
Но сейчас, очевидно, нам нужен
способ связать,

72
00:03:38,820 --> 00:03:41,040
какой зомби что твитнул.

73
00:03:41,040 --> 00:03:44,820
В Rails можно сделать
ассоциации, которые добавят

74
00:03:44,820 --> 00:03:48,560
zombie_ID колонку
к таблице с твитами.

75
00:03:48,560 --> 00:03:52,030
Затем мы установим ID для
каждого зомби, которыйделает твит,

76
00:03:52,030 --> 00:03:55,810
и затем мы можем
связать зомби и их твиты.

77
00:03:55,810 --> 00:03:58,720
Теперь если мы добавляем новый твит,
например "твои глаза на вкус как бекон"

78
00:03:58,720 --> 00:04:02,440
мы можем конкретизировать
какому зомби

79
00:04:02,440 --> 00:04:04,660
принадлежит это высказывание.

80
00:04:04,660 --> 00:04:07,550
Итак посмотрите на эту таблицу,
 мы можем точно знать

81
00:04:07,550 --> 00:04:10,770
что и какой зомби твитнул.

82
00:04:10,770 --> 00:04:14,760
в нашей моделе, делая корректные
взаимосвязи, мы просто добавляем

83
00:04:14,760 --> 00:04:17,769
belongs_to :zombie.

84
00:04:17,769 --> 00:04:19,310
Важно заметить, что
тут мы используем

85
00:04:19,310 --> 00:04:20,980
зомби сингулярность.

86
00:04:20,980 --> 00:04:25,600
Мы делаем belongs_to :zombie потому что
 один твит принадлежит

87
00:04:25,600 --> 00:04:27,380
одному зомби.

88
00:04:27,380 --> 00:04:30,110
Итак, теперь мы сделали односторонние
 связи в отношениях.

89
00:04:30,110 --> 00:04:34,080
Как можно сделать их в обратную сторону
и узнать, что у зомби

90
00:04:34,080 --> 00:04:38,810
может быть много твитов?

91
00:04:38,810 --> 00:04:41,470
Что ж, если вы посмотрите на модель,
что бы сделать связь

92
00:04:41,470 --> 00:04:45,570
мы просто напишем
has_many :tweets.

93
00:04:45,570 --> 00:04:47,880
Теперь мы связываем всё корректно
для каждой модели.

94
00:04:47,880 --> 00:04:49,870
Давайте поиграемся с этим в консоли.

95
00:04:51,210 --> 00:04:55,000
Мы собираемся получить
зомби, затем создать твит

96
00:04:55,000 --> 00:04:59,013
для этого зомби, написав
Tweet.create, отправить ему

97
00:04:59,013 --> 00:05:03,180
статус, и конкретизировать
зомби.

98
00:05:03,180 --> 00:05:06,550
На второй линии вы заметите
что твиты сохраняются и

99
00:05:06,550 --> 00:05:08,250
хранятся в переменной t.

100
00:05:08,250 --> 00:05:12,580
Мы можем вызвать t.zombie
что бы получить зомби объект

101
00:05:12,580 --> 00:05:16,430
для этого твита, и вызвать
t.zombie.name что бы вывести

102
00:05:16,430 --> 00:05:20,660
того зомби, который сделал твит,
в этом случае это был Bob.

103
00:05:20,660 --> 00:05:23,640
Для рассмотрения отношений
в обратную сторону, мы можем

104
00:05:23,640 --> 00:05:24,980
достать конкретного зомби.

105
00:05:27,480 --> 00:05:30,070
Мы можем подсчитать количествоf
твитов этого зомби

106
00:05:30,070 --> 00:05:34,540
просто вызвав ash.tweets, 
обратно получим массив

107
00:05:34,540 --> 00:05:37,090
твитов, которые
сделал наш зомби.

108
00:05:37,090 --> 00:05:39,950
Теперь, настало время
покодить в упражнениях

