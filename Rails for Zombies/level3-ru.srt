1
00:00:00,350 --> 00:00:02,830
Я Грег Полак и вы
смотрите Rails для Зомби,

2
00:00:02,830 --> 00:00:04,322
Эпизод 3.

3
00:00:18,830 --> 00:00:21,010
В этом эпизоде мы будем говорить
о такой вещи, как view,

4
00:00:21,010 --> 00:00:23,150
которая не всегда так хороша,
особенно, когда

5
00:00:23,150 --> 00:00:26,200
вы едите мозги.

6
00:00:26,200 --> 00:00:28,780
Итак, вот наш запрос
пришел к Rails.

7
00:00:28,780 --> 00:00:32,080
Он пройдёт через четыре
различных компонента.

8
00:00:32,080 --> 00:00:34,380
Мы уже немного говорили
о компонентах, которые

9
00:00:34,380 --> 00:00:35,960
были моделями.

10
00:00:35,960 --> 00:00:38,390
Но сейчас, мы поговорим о
view, которая

11
00:00:38,390 --> 00:00:41,280
находится прямо перед вами.

12
00:00:41,280 --> 00:00:43,560
Давайте взглянем на
структуру дерикторий нашего

13
00:00:43,560 --> 00:00:45,480
приложений Twitter для Zombies.

14
00:00:45,480 --> 00:00:47,060
Она, скорее всего, будет выглядеть
примерно вот так.

15
00:00:47,060 --> 00:00:48,920
Как вы видите, у нас есть
дирекотория app.

16
00:00:48,920 --> 00:00:50,940
в ней находятся views.

17
00:00:50,940 --> 00:00:52,660
в которой находится
zombie директория

18
00:00:52,660 --> 00:00:54,380
и дериктория tweets.

19
00:00:54,380 --> 00:00:58,450
внутри tweets директории
лежит index.html.erb и

20
00:00:58,450 --> 00:01:02,510
show.html.erb. Один из этих файлов
показывает все твиты, а другой

21
00:01:02,510 --> 00:01:05,290
какие нибудь конкретные твиты.

22
00:01:05,290 --> 00:01:08,830
Расширение файла тут
.html.erb.

23
00:01:08,830 --> 00:01:11,190
erb, я знаю, вы подумали, что,
 это расшифровывается как

24
00:01:11,190 --> 00:01:12,720
Edible Rotting Bodies.

25
00:01:12,720 --> 00:01:13,870
Нет-нет, не совсем так.

26
00:01:13,870 --> 00:01:18,430
На самом деле оно расшифровывается, как
 Embedded Ruby.

27
00:01:18,430 --> 00:01:19,910
В общем, Ruby в HTML.

28
00:01:22,430 --> 00:01:25,970
Теперь давайте посмотрим
на действие, которое показывает твиты.

29
00:01:25,970 --> 00:01:28,180
Вот как это может
выглядеть в браузере.

30
00:01:28,180 --> 00:01:31,150
Итак, мы показываем статус
конкретного твита и

31
00:01:31,150 --> 00:01:34,110
показываем какой зомби
сделал твит.

32
00:01:34,110 --> 00:01:37,920
Итак в Rails есть два новых
HTML тэга, которые

33
00:01:37,920 --> 00:01:40,750
мы будем использовать
в наших erb файлах.

34
00:01:40,750 --> 00:01:44,250
Первый, это тэг
<% %>

35
00:01:44,250 --> 00:01:46,860
Всё, что находится внутри
этого тэга

36
00:01:46,860 --> 00:01:49,110
будет расценено как Ruby.

37
00:01:49,110 --> 00:01:52,530
И у нас есть такая вот 
 версия этого тэга
<%= %>

38
00:01:52,530 --> 00:01:54,180
которая будет выполняться
Ruby.

39
00:01:54,180 --> 00:01:56,140
И всё что тут вернётся,
при выполнении кода,

40
00:01:56,140 --> 00:01:59,160
выведется на странице.

41
00:01:59,160 --> 00:02:01,760
Теперь, если мы откроем
show.html.erb, то вот,

42
00:02:01,760 --> 00:02:03,260
что мы увидим.

43
00:02:03,260 --> 00:02:05,770
Вы заметите, что тут
есть немного HTML

44
00:02:05,770 --> 00:02:07,580
элементов в header.

45
00:02:07,580 --> 00:02:11,190
И так же присутствует
tweet = Tweet.find(1)

46
00:02:11,190 --> 00:02:11,780
Это должно быть вам
 уже немного знакомо.

47
00:02:11,780 --> 00:02:15,180
Мы вытягиваем твит,
и потом выполняем Rails код.

48
00:02:15,180 --> 00:02:18,230
И так же у нас есть header, который является
статусом твитов.

49
00:02:18,230 --> 00:02:19,950
И затем мы делаем так
posted by tweet.zombie.name.

50
00:02:23,410 --> 00:02:24,740
О, посмотрите, полезли
Зомби, они говорят нам,

51
00:02:24,740 --> 00:02:26,070
что наш код отстой.

52
00:02:26,070 --> 00:02:27,260
Так и есть на самом деле.

53
00:02:27,260 --> 00:02:28,790
Он отстойный по двум
причинам.

54
00:02:28,790 --> 00:02:31,920
Одна из них, очевидно, если
если вы посмотрите на эту часть

55
00:02:31,920 --> 00:02:34,840
вы заметите немного кода в
header и немного в

56
00:02:34,840 --> 00:02:36,000
footer.

57
00:02:36,000 --> 00:02:38,370
И, очевидно, если мы дальше
продолжим в том же духе, то

58
00:02:38,370 --> 00:02:40,720
нам нужно будет копипастить всё
это по всей странице,

59
00:02:40,720 --> 00:02:42,010
что не есть хорошо.

60
00:02:42,010 --> 00:02:43,480
Итак, первое, что мы сделаем
это

61
00:02:43,480 --> 00:02:46,140
возьмём на header и footer,
и положим их в файл

62
00:02:46,140 --> 00:02:50,610
под названием
application.html.erb, который

63
00:02:50,610 --> 00:02:53,230
расположени в директории
layouts.

64
00:02:53,230 --> 00:02:56,720
Итак, у нас есть код для показа
контента и есть

65
00:02:56,720 --> 00:02:57,830
вот тут вот layout.

66
00:02:57,830 --> 00:02:59,090
Есть ещё одна вешь, которую
необходимо

67
00:02:59,090 --> 00:03:01,790
добавить в layout,
 которая называется yield.

68
00:03:01,790 --> 00:03:05,930
Итак, это говорит Rails: 
"В этом месте, когда

69
00:03:05,930 --> 00:03:12,590
увидишь yield, то положи сюда
view код.

70
00:03:12,590 --> 00:03:14,990
Теперь если мы вернёмся
к нашим директориям, то

71
00:03:14,990 --> 00:03:17,490
увидим, что нужно добавить
директорию layouts и внутри

72
00:03:17,490 --> 00:03:20,300
неё добавить application.html.erb,
который является

73
00:03:20,300 --> 00:03:24,040
основным слоем для нашего сайта.

74
00:03:24,040 --> 00:03:25,870
Есть ещё пара вещей
которые вы увидите в стандартных

75
00:03:25,870 --> 00:03:28,080
слоях Rails.

76
00:03:28,080 --> 00:03:30,650
Вы увидите таблицу
стилей прикрепленную,
к тэгу

77
00:03:30,650 --> 00:03:34,290
JavaScript добавляет его,
а так же csrf meta тэг.

78
00:03:34,290 --> 00:03:36,085
Теперь рассмотрим
всё по порядку, чтобы

79
00:03:36,085 --> 00:03:38,100
вы понимали, что всё это значит,
начиная со

80
00:03:38,100 --> 00:03:39,680
stylesheet_link_tag.

81
00:03:39,680 --> 00:03:42,020
В основном, это просто
подключение

82
00:03:42,020 --> 00:03:43,400
таблицы стилей.

83
00:03:43,400 --> 00:03:46,120
Он заглянет в директорию
public, которая находится

84
00:03:46,120 --> 00:03:49,070
директории stylesheets,
и подключит все 
таблицы стилей

85
00:03:49,070 --> 00:03:51,310
и сделае рендер, который
будет выглядеть примерно

86
00:03:51,310 --> 00:03:52,560
как этот.

87
00:03:55,610 --> 00:03:58,090
Дальше пойдёт
javascript_include_tag.

88
00:03:58,090 --> 00:04:01,570
Он поключит весь
стандартный JavaScript код.

89
00:04:01,570 --> 00:04:02,820
Откуда он его возьмёт?

90
00:04:02,820 --> 00:04:05,400
Что ж, он посмотрит в папке
public javascripts

91
00:04:05,400 --> 00:04:08,680
и, по умолчанию, в Rails app.
 Он подключит все

92
00:04:08,680 --> 00:04:11,000
файлы JavaScript
которые будут

93
00:04:11,000 --> 00:04:12,920
распознаны, как часть

94
00:04:12,920 --> 00:04:14,990
JavaScript фреймворка prototype.

95
00:04:14,990 --> 00:04:18,690
Теперь можете не беспокоиться, если
о фанатах jQuery или MooTools.

96
00:04:18,690 --> 00:04:22,910
Вы можете просто заменить их
JavaScript

97
00:04:22,910 --> 00:04:25,130
библиотекой, которую
выберете сами.

98
00:04:25,130 --> 00:04:29,090
Далее в для защиты откросс-доменных запросов
подменяются мета тэги.

99
00:04:29,090 --> 00:04:32,140
Это защити от зомби сайт от
хакерской атаки, которая

100
00:04:32,140 --> 00:04:34,410
заваливает спам-комментариями.

101
00:04:34,410 --> 00:04:36,520
Вы заметите, взглянув в
исходный код

102
00:04:36,520 --> 00:04:40,560
страницы Rails. В неё заложены
все csrf параметры and csrf

103
00:04:40,560 --> 00:04:43,440
ключи мета тегов, прямо
тут наверху.

104
00:04:43,440 --> 00:04:46,270
И затем, оно оавтоматически
включит их во все

105
00:04:46,270 --> 00:04:49,300
формы в приложении,
что убедиться, что это

106
00:04:49,300 --> 00:04:51,620
не хакерская атака.

107
00:04:51,620 --> 00:04:53,290
Далее, нам нужно немного
поговорить о

108
00:04:53,290 --> 00:04:55,150
root path (корневой путь) и images.

109
00:04:55,150 --> 00:04:58,820
Итак, если кто-то заходит в ваше
Rails приложение и ставит слеш или

110
00:04:58,820 --> 00:05:01,500
что-то подобное, и пишет что-либо
после корневого пути, то первое,

111
00:05:01,500 --> 00:05:03,860
что произойдёт, это проверка
вашей директории public,

112
00:05:03,860 --> 00:05:05,880
существует в ней, что-то
подобное или нет.

113
00:05:05,880 --> 00:05:08,810
Если нет, то оно всё равно
попытается это выполнить.

114
00:05:09,870 --> 00:05:13,640
Хорошим примером будут
ваши картинки.

115
00:05:13,640 --> 00:05:18,180
Если файл существует, то
он его отобразит.

116
00:05:18,180 --> 00:05:19,600
Теперь мы научимся
как создавать ссылки

117
00:05:19,600 --> 00:05:20,900
в вашем Rails views.

118
00:05:20,900 --> 00:05:23,970
Вот часть нашего view, 
где мы выводим все

119
00:05:23,970 --> 00:05:28,330
зомби имена, но, что если
мы захотим сделать их ссылками

120
00:05:28,330 --> 00:05:30,340
И показывать страницу, которая
будет выводить информации

121
00:05:30,340 --> 00:05:32,120
о данном, конкретном зомби.

122
00:05:32,120 --> 00:05:37,500
В этом случае, у нас в Ruby есть
есть тэг с знаком процентов и равно

123
00:05:37,500 --> 00:05:42,670
Скажем, link_to tweet.zombie.name.

124
00:05:42,670 --> 00:05:46,560
И затем путь, который будет
задаваться zombie_path(tweet.zombie)

125
00:05:46,560 --> 00:05:51,060
Итак у нас есть текст нашей ссылки
и есть путь нашей ссылки.

126
00:05:51,060 --> 00:05:54,360
Всё это выведет
очень знакомый вам HTML.

127
00:05:54,360 --> 00:05:56,290
И есит другой способ сделать
тоже самое, который

128
00:05:56,290 --> 00:05:57,260
чуточку попроще.

129
00:05:57,260 --> 00:06:00,200
Мы просто можем написать
текст нашей ссылки и затем путь

130
00:06:00,200 --> 00:06:02,500
 к объекту, который будет её отображать,
который, в данном случае,

131
00:06:02,500 --> 00:06:04,270
просто напросто zombie.

132
00:06:04,270 --> 00:06:07,400
Rails может автоматически посмотреть
модель и выяснить

133
00:06:07,400 --> 00:06:10,550
каким будет правильный путь
для отображения конкретного зомби.

134
00:06:10,550 --> 00:06:13,360
Этот вспомогательный метод link_to
имеет много разных опций.

135
00:06:13,360 --> 00:06:15,980
И вы можете спросить, как
ты догадался, что все

136
00:06:15,980 --> 00:06:18,160
эти разные опции делают?

137
00:06:18,160 --> 00:06:19,560
Что ж. Есть несколько
различных путей того

138
00:06:19,560 --> 00:06:20,740
как можно это выяснить.

139
00:06:20,740 --> 00:06:24,070
Во-первых, можно 
посмотреть в исходники.

140
00:06:24,070 --> 00:06:28,050
Поэтому можно набрать, git clone
и клонировать исходники Ruby.

141
00:06:28,050 --> 00:06:31,000
И зайти в вашу Rails
директорию, открыв её

142
00:06:31,000 --> 00:06:34,310
в любом текстовом редакторе
и затем найти там link_to

143
00:06:34,310 --> 00:06:37,210
Затем посмотреть определение
значения метода и почитать

144
00:06:37,210 --> 00:06:38,480
о нём.

145
00:06:38,480 --> 00:06:40,260
Второй вариант, это 
заглянуть в

146
00:06:40,260 --> 00:06:42,730
api.rubyonrails.org.

147
00:06:42,730 --> 00:06:45,230
Это API
документация для Rails.

148
00:06:45,230 --> 00:06:47,310
И, очевидно, вы можете использовать
бразерный пойск по нему.

149
00:06:48,680 --> 00:06:54,110
Третий вариант, это
зайти на apidock.com/rails.

150
00:06:54,110 --> 00:06:56,520
Это онлайн версия документации

151
00:06:56,520 --> 00:07:00,180
с комментариями.

152
00:07:00,180 --> 00:07:03,995
Четвертый способ, посмотреть в
Rails Searchable API Doc

153
00:07:03,995 --> 00:07:08,590
на сайте railsapi.com.
И тут можно скачать

154
00:07:08,590 --> 00:07:09,710
все это дело себе.

155
00:07:09,710 --> 00:07:12,360
Тут у них неплохая Ajax
штука для поиска.

156
00:07:12,360 --> 00:07:15,580
И тут реально легко
смотреть и читать код.

157
00:07:15,580 --> 00:07:18,010
Тут вы можете видеть, как мы
смотрим описание link_to.

158
00:07:18,010 --> 00:07:21,800
И одной из опций
link_to является

159
00:07:21,800 --> 00:07:23,900
всплывающее окно подтверждения
когда кто-нибудь кликнет по ссылке.

160
00:07:23,900 --> 00:07:28,030
И если вы добавите его, то будете
уверены в том, что

161
00:07:28,030 --> 00:07:30,810
кто-то точно по ней кликнул.
Выведется JavaScript alert

162
00:07:30,810 --> 00:07:33,950
который спросит: вы уверены?

163
00:07:33,950 --> 00:07:36,110
Итак мы тольлко что закончили
с отображением

164
00:07:36,110 --> 00:07:39,300
конкретного твита, но
как будут упорядочиваться

165
00:07:39,300 --> 00:07:42,120
твиты на странице
где мы их перечисляем?

166
00:07:42,120 --> 00:07:44,520
Что ж, это может выглядить
примерно как тут,

167
00:07:44,520 --> 00:07:47,000
когда мы перечисляем
твиты.

168
00:07:47,000 --> 00:07:49,050
А вот как примерно будет
выглядеть код.

169
00:07:49,050 --> 00:07:51,170
Итак, header, в котором
перечисляются твиты.

170
00:07:51,170 --> 00:07:53,120
Мы начинаем таблицу.

171
00:07:53,120 --> 00:07:55,800
Затем делаем Tweet.all.each
что бы пройтись по

172
00:07:55,800 --> 00:07:57,540
каждому твиту.

173
00:07:57,540 --> 00:07:59,920
И вот это наш
базовый блок кода.

174
00:07:59,920 --> 00:08:03,300
Внутри, мы выведем
статус твитов,

175
00:08:03,300 --> 00:08:06,025
и имя зомби
для каждого твита.

176
00:08:08,680 --> 00:08:11,800
Что бы проследить за тем
что нам возвращает каждый раз этот код,

177
00:08:11,800 --> 00:08:15,610
мы возвращаем класс
который будет каждый раз

178
00:08:15,610 --> 00:08:17,450
вызываться.

179
00:08:17,450 --> 00:08:19,920
Tweet.all вернет
массив твитов.

180
00:08:19,920 --> 00:08:23,590
Теперь если мы пройдёмся по
каждому из них, мы поместим, каждый в переменную tweet, которая

181
00:08:23,590 --> 00:08:27,290
начинается с маленькой буквы.

182
00:08:27,290 --> 00:08:29,520
Что если мы хотим
сделать всё это ссылками?

183
00:08:29,520 --> 00:08:33,090
Мы сделаем ссылку для показа твитов
и ссылку для

184
00:08:33,090 --> 00:08:34,730
отображения действий zombie.

185
00:08:34,730 --> 00:08:39,750
Что ж, давайте добавим link_to, а потом
укажем конкретный твит.

186
00:08:39,750 --> 00:08:42,270
Апотом добавим
 link_to, и потом

187
00:08:42,270 --> 00:08:46,160
конкретного зомби zombie.

188
00:08:46,160 --> 00:08:48,780
Теперь давайте немного
нарастим функциональность.

189
00:08:48,780 --> 00:08:51,970
Прямо сейчас, у нас нет
никаких твитов.

190
00:08:51,970 --> 00:08:55,860
Мы выведем сообщение
что твиты не найдены.

191
00:08:55,860 --> 00:08:58,020
Итак, вот тут будет наш код.

192
00:08:58,020 --> 00:09:00,730
Во-первых нам нужно
tweet.all и поместить

193
00:09:00,730 --> 00:09:05,240
все твиты
в переменные.

194
00:09:05,240 --> 00:09:08,250
Мы будем это делать
для каждого

195
00:09:08,250 --> 00:09:10,370
твита.

196
00:09:10,370 --> 00:09:13,720
И затем мы собираемся указать,
что, если размер твита

197
00:09:13,720 --> 00:09:18,420
равен нулю, то нужно  вывести
no tweets found.

198
00:09:18,420 --> 00:09:22,130
Мы можем немного упростить
этот код написав

199
00:09:22,130 --> 00:09:24,050
.empty?

200
00:09:24,050 --> 00:09:27,080
И если это равно true, то
выведется "no tweets found".

201
00:09:27,080 --> 00:09:29,680
Можно увидеть результат тут.

202
00:09:29,680 --> 00:09:32,980
Теперь, что если мы захотим add
добавить возможность редактирования или
добавления

203
00:09:32,980 --> 00:09:35,850
в наш список твитов, что бы мы
могли быстренько стереть их или

204
00:09:35,850 --> 00:09:36,990
добавить новый?

205
00:09:36,990 --> 00:09:39,310
Как тогда будет
выглядеть наш код?

206
00:09:39,310 --> 00:09:42,880
Окей, тут мы добавим
link_to к "Edit"

207
00:09:42,880 --> 00:09:46,950
И мы собираемся сделать,
edit_tweet_path(tweet)

208
00:09:46,950 --> 00:09:51,230
И что бы добавить ссылку для,
стирания, мы напишем после link_to слово delete,

209
00:09:51,230 --> 00:09:55,950
укажем конкретный твит, и затем пропишем
метод delete.

210
00:09:55,950 --> 00:09:57,330
Теперь я немного  пробегусь по
способам,

211
00:09:57,330 --> 00:10:00,790
которык вы можете использовать
в link_to в Rails и может

212
00:10:00,790 --> 00:10:03,330
так же и в упражнении
которое вы будете делать.

213
00:10:03,330 --> 00:10:05,110
Итак, что бы вывести все твиты,
вам необходимо

214
00:10:05,110 --> 00:10:06,830
использовать tweets_path.

215
00:10:06,830 --> 00:10:09,870
Это сгенерирует URL пути
ко всем твитам.

216
00:10:09,870 --> 00:10:13,410
Что бы сделать новый путь твита,
в при заполнении формы
используйте new_tweet_path

217
00:10:15,650 --> 00:10:17,390
В оставшейся части пути,
вам нужно сослаться

218
00:10:17,390 --> 00:10:19,620
на конкретный твит.

219
00:10:19,620 --> 00:10:22,600
Итак, тут мы берем
твит с ID равным 1.

220
00:10:22,600 --> 00:10:26,610
Что бы показать его, мы просто вставим
его в объект tweet,

221
00:10:26,610 --> 00:10:29,000
который сгенерирует URL.

222
00:10:29,000 --> 00:10:31,510
Для его редактирования, нужно использовать
 edit_tweet_path (tweet).

223
00:10:31,510 --> 00:10:34,490
И мы получим
наш URL.

224
00:10:34,490 --> 00:10:38,050
Для удаления твита, мы
просто определим,

225
00:10:38,050 --> 00:10:40,670
и укажем метод, как delete.

226
00:10:40,670 --> 00:10:44,910
И всё это дело сгенерирует путь
tweets/1.

227
00:10:44,910 --> 00:10:47,180
Мы подошли к Зомби упражнению
номер 3, где вы сможете

228
00:10:47,180 --> 00:10:48,960
поробовать это всё на практике.

