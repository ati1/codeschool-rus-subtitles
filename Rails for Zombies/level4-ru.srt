1
00:00:00,340 --> 00:00:02,560
Я Грег Полак и вы смотрите
Rails для Зомби,

2
00:00:02,560 --> 00:00:04,250
Эпизод 4.

3
00:00:07,072 --> 00:00:10,944
Настало время немного
разобраться в Rails.

4
00:00:17,800 --> 00:00:22,540
В этом эпизоде мы
будем рассматривать контроллеры.

5
00:00:22,540 --> 00:00:25,210
Итак, вот наше приложение.

6
00:00:25,210 --> 00:00:27,220
В саом низу у нас
модели.

7
00:00:27,220 --> 00:00:30,420
Вот здесь у нас views,
а теперь мы

8
00:00:30,420 --> 00:00:32,480
поговорим о контроллерах.

9
00:00:34,980 --> 00:00:37,570
Помните, как в прошлом 
эпизоде вышел чел и 

10
00:00:37,570 --> 00:00:39,800
сказал: "этот код отстой".

11
00:00:39,800 --> 00:00:41,310
И мы исправили одну причину
по которой он был таким

12
00:00:41,310 --> 00:00:42,860
Мы использовали слои.

13
00:00:42,860 --> 00:00:45,590
Но вторая причина почему
он отстой, это потому, что

14
00:00:45,590 --> 00:00:47,930
мы пока не использовали
контроллер.

15
00:00:47,930 --> 00:00:52,220
Итак, когда запрос попадает в
Rails, сначала срабатывает

16
00:00:52,220 --> 00:00:56,290
контроллер,
до того, как отобразятся view.

17
00:00:56,290 --> 00:00:58,630
Источник этого контроллеров
находится в директории

18
00:00:58,630 --> 00:01:02,110
контроллеров, и он
будет называться, в нашем случае,

19
00:01:02,110 --> 00:01:03,360
tweets_controller.rb.

20
00:01:05,615 --> 00:01:09,630
Это не случайно, что в имени
есть слово tweets.

21
00:01:09,630 --> 00:01:13,085
Так же tweets есть
в пути к контроллеру

22
00:01:14,610 --> 00:01:19,150
Это просто одна из
интелектуальных фишек Rails.

23
00:01:19,150 --> 00:01:22,620
Внутри контроллера tweets
у нас есть класс TweetsController

24
00:01:22,620 --> 00:01:26,760
который наследуется от
ApplicationController.

25
00:01:26,760 --> 00:01:32,990
Так же внутри нашего файла
вероятно мы найдём метод show.

26
00:01:32,990 --> 00:01:35,700
Это так же не совпадение.
Метод show связан с

27
00:01:35,700 --> 00:01:37,840
с методом show во view.

28
00:01:37,840 --> 00:01:40,500
Теперь, как мыможем исправить код
и сделать его лучше?

29
00:01:40,500 --> 00:01:42,980
Что ж, мы возьмём код
который ищет твиты

30
00:01:42,980 --> 00:01:47,700
и переместим его
в контроллер.

31
00:01:47,700 --> 00:01:51,160
И ещё одна классная договорённость
 в Rails сохранять все вызовы методов

32
00:01:51,160 --> 00:01:53,630
в вашем контроллере.

33
00:01:53,630 --> 00:01:55,810
Просто так нужно. Ваши views
не переполняются кучей

34
00:01:55,810 --> 00:01:58,190
Ruby кода внутри.

35
00:01:58,190 --> 00:01:59,980
Итак, первое, что произойдёт
когда прийдёт запрос

36
00:01:59,980 --> 00:02:03,440
он попадёт в контроллер tweets,
выполнит весь код в show

37
00:02:03,440 --> 00:02:07,370
и только потом он

38
00:02:07,370 --> 00:02:10,070
отобразит show из view.

39
00:02:10,070 --> 00:02:11,560
Ой-ой, опять здесь
 появился зомби.

40
00:02:11,560 --> 00:02:14,910
И он говорит "Постой, а что на счёт
переменных в scope?".

41
00:02:14,910 --> 00:02:17,890
Вы конечно удивитесь, но
переменная tweet,

42
00:02:17,890 --> 00:02:19,060
находиться внутри метода show.

43
00:02:19,060 --> 00:02:21,590
Каким образом view
получит к ней доступ?

44
00:02:21,590 --> 00:02:22,990
Что ж, это хороший вопрос.

45
00:02:22,990 --> 00:02:25,730
Это то место где появляются
instance variables.
(переменные экземпляра класса)

46
00:02:25,730 --> 00:02:29,490
Итак, в Rails, мы берем и
стави символ @ перед переменной

47
00:02:29,490 --> 00:02:32,710
tweet, и это
подсказывает Rails, что

48
00:02:32,710 --> 00:02:35,940
переменная, хочет
получить доступ из

49
00:02:35,940 --> 00:02:37,580
наших views.

50
00:02:37,580 --> 00:02:40,020
Итак, вы можете заметить
символ @ каждый раз, когда

51
00:02:40,020 --> 00:02:42,250
мы используем
переменную tweet.

52
00:02:42,250 --> 00:02:44,880
Давайте пройдёмся по обычным,
дефолтным, вещам в Rails.

53
00:02:45,920 --> 00:02:49,520
Что если мы захотели вывести
из view все статусы

54
00:02:49,520 --> 00:02:51,840
вместо show?

55
00:02:51,840 --> 00:02:54,320
Что ж, тогда нам нужен
небольшой кода, который

56
00:02:54,320 --> 00:02:56,510
даст знать Rails, что действие
которое мы хотим вывести

57
00:02:56,510 --> 00:02:58,920
называется status.

58
00:02:58,920 --> 00:03:02,190
Это, всего лишь, один небольшой пример
как можно выйти за рамки

59
00:03:02,190 --> 00:03:06,610
стандартного Rails. Всегда, есть 
возможность всё перезаписать.

60
00:03:06,610 --> 00:03:09,190
Этот код подойдёт, если мы
хоти все время показывать

61
00:03:09,190 --> 00:03:11,970
твиты с ID равному 1. Но, очевидно,
люди захотят показать и

62
00:03:11,970 --> 00:03:15,730
остальные твиты, а для этого
и нужно указать конкретный ID 

63
00:03:15,730 --> 00:03:17,250
в URL, вот прямо как тут.

64
00:03:17,250 --> 00:03:20,060
Итак, как нам изменить код
 под это дело?

65
00:03:20,060 --> 00:03:23,570
Что ж, оказывается, что использование
этих соглашений приведет к

66
00:03:23,570 --> 00:03:27,650
к тому, что этот номер попадёт в хэш
под названием params с ключем

67
00:03:27,650 --> 00:03:29,290
в поле ID.

68
00:03:29,290 --> 00:03:32,020
Итак, когда приходит запрос,
изначально у него есть только

69
00:03:32,020 --> 00:03:36,865
хэш этого params, а внутри
хэша содержится

70
00:03:36,865 --> 00:03:39,000
 ID

71
00:03:39,000 --> 00:03:40,480
И так он становится значением.

72
00:03:40,480 --> 00:03:44,695
Поэтому внутри действия show 
мы работаем с params, ID, и затем

73
00:03:44,695 --> 00:03:47,660
найдём нужный нам твит.

74
00:03:47,660 --> 00:03:51,160
Что бы мы не делали,
посылали параметры в запросе в URL

75
00:03:51,160 --> 00:03:54,680
или post запросе, Rails поместит
всё в хэш и назовёт это

76
00:03:54,680 --> 00:03:55,950
params.

77
00:03:55,950 --> 00:03:59,210
Итак, у нас опять есть хэш params
и если нам нужно получить доступ

78
00:03:59,210 --> 00:04:03,930
к значению статуса, мы можем
просто создать новый твит

79
00:04:03,930 --> 00:04:09,140
и установить статус в
params[:status]

80
00:04:09,140 --> 00:04:12,120
Часто в Rails, внутри этого хэша
с параметрами, вы увидите

81
00:04:12,120 --> 00:04:13,780
много различных хэшей.

82
00:04:13,780 --> 00:04:16,209
Итак, тут можно увидеть хэш
в котором содержится твит и

83
00:04:16,209 --> 00:04:18,829
внутри этого твита, хэш
со статусом.

84
00:04:18,829 --> 00:04:22,079
Итак, если мы тут хотим создать
твит используя это значение

85
00:04:22,079 --> 00:04:24,790
мы сделаем params[:tweet][:status].

86
00:04:24,790 --> 00:04:26,880
Вы заметите, что хотя,
мы и вызвали этот создающий метод

87
00:04:26,880 --> 00:04:29,370
у нас уже есть
хэш.

88
00:04:29,370 --> 00:04:35,590
И поэтому мы можем сделать это ещё проще,
используя params tweet.

89
00:04:35,590 --> 00:04:39,460
Теперь, что если мы захотели поместить
наши твиты в XML или JSON?

90
00:04:39,460 --> 00:04:41,810
Давайте представим веб-сервис.

91
00:04:41,810 --> 00:04:46,440
У нас есть XML, который мы ожидаем
от tweet, и вот

92
00:04:46,440 --> 00:04:49,570
JSON, который мы можем 
так же ожидать от tweet.

93
00:04:49,570 --> 00:04:51,840
Теперь мы будем использовать
кое-какие URL.

94
00:04:51,840 --> 00:04:56,000
Мы можем указать .xml, что бы получить XML
или .json, что бы получить JSON.

95
00:04:56,000 --> 00:04:58,910
Это всё происходит в Rails по умолчанию.

96
00:04:58,910 --> 00:05:00,600
Внутри метода show
мы добавим чуток

97
00:05:00,600 --> 00:05:01,700
кода.

98
00:05:01,700 --> 00:05:05,290
Мы добавим бло
respond_to.

99
00:05:05,290 --> 00:05:07,710
И внутри него
мы опишем действие

100
00:05:07,710 --> 00:05:11,210
отвечающее в HTML.

101
00:05:11,210 --> 00:05:14,620
Так же оно будет отвечать в XML,
и отображать

102
00:05:14,620 --> 00:05:16,820
XML из твитов.

103
00:05:16,820 --> 00:05:22,280
И оно так же будет отвечать в JSON
отображая твиты из JSON.

104
00:05:22,280 --> 00:05:24,460
Это всё, что мы должны сделать,
и теперь Rails отобразит

105
00:05:24,460 --> 00:05:28,130
на выходе твиты в XML или JSON.

106
00:05:28,130 --> 00:05:30,110
Тут будут несколько обычных
действий, которые можно

107
00:05:30,110 --> 00:05:32,510
встретить в Rails контроллерах.
И иногда их очень много

108
00:05:32,510 --> 00:05:33,520
если вы работает с юольшим
Rails приложением.

109
00:05:33,520 --> 00:05:35,330
Давайте пройдём через каждое из них.

110
00:05:35,330 --> 00:05:37,430
У вас есть index action,
который выведет список

111
00:05:37,430 --> 00:05:38,490
всех твитов.

112
00:05:38,490 --> 00:05:40,990
Ваш show action для 
отображения одного твита.

113
00:05:40,990 --> 00:05:44,930
У вас есть new action для показа
формы новых твитов, для показа

114
00:05:44,930 --> 00:05:48,900
формы редактирования твитов, create для
создания новых твитов, update для

115
00:05:48,900 --> 00:05:53,370
обновления, destroy
для удаления твитов.

116
00:05:53,370 --> 00:05:55,100
Теперь я покажу вам, как создать
небольшую авторизацию

117
00:05:55,100 --> 00:05:57,870
в нашем приложении.

118
00:05:57,870 --> 00:06:01,720
Итак, нажав на кнопку edit
на странице твитов, вызовется

119
00:06:01,720 --> 00:06:04,690
edit action.

120
00:06:04,690 --> 00:06:07,480
Внутри edit action, мне, очевидно
нужно

121
00:06:07,480 --> 00:06:10,440
получить твтит
для редактирования.

122
00:06:10,440 --> 00:06:16,570
По умолчанию он
отобразит edit view.

123
00:06:16,570 --> 00:06:18,360
И тут мы увидим нашу edit форму

124
00:06:18,360 --> 00:06:19,760
на экране.

125
00:06:19,760 --> 00:06:22,390
Теперь, когда я в следующий раз нажму
кнопку Edit, я захочу, что бы

126
00:06:22,390 --> 00:06:25,080
если пользователь был не
авторизирован, то показывалось

127
00:06:25,080 --> 00:06:27,080
сообщение: 
"sorry, you can't edit someone
else's tweet".

128
00:06:27,080 --> 00:06:29,230
Итак, как же
нам всё таки добраться до

129
00:06:29,230 --> 00:06:31,080
места, где сообщения
можно реадктировать?

130
00:06:31,080 --> 00:06:33,820
Что ж, у нас есть edit action,
и покажу вам пару

131
00:06:33,820 --> 00:06:34,930
новых концепций.

132
00:06:34,930 --> 00:06:37,350
Во-первых, сессии.

133
00:06:37,350 --> 00:06:40,780
Сессии, изначально работают
с хэшем только одного пользователя.

134
00:06:40,780 --> 00:06:43,390
За один запрос, она
хранит и обрабатывает

135
00:06:43,390 --> 00:06:44,960
одного конкретного пользователя.

136
00:06:44,960 --> 00:06:46,610
Часто делая сохранение в cookie.

137
00:06:46,610 --> 00:06:49,960
Итак, тут мы проверяем
есть ID зомби пользователя

138
00:06:49,960 --> 00:06:53,960
внутри нашей сессии и, что оно
равно зомби ID конкретного

139
00:06:53,960 --> 00:06:54,840
твита.

140
00:06:54,840 --> 00:06:58,320
Итак, если оно нам не принадлежит
то мы

141
00:06:58,320 --> 00:07:00,940
создадим вспышку (flash).

142
00:07:00,940 --> 00:07:04,080
Flash это то, что мы используем, что бы
отсылать сообщения пользователю, итак

143
00:07:04,080 --> 00:07:07,185
вывели предупреждение на экран
в котором говориться: "Извинте, вы

144
00:07:07,185 --> 00:07:08,790
не можете редактировать этот твит".

145
00:07:08,790 --> 00:07:11,900
После того, как мы установили это сообщение,
мы направим пользователя

146
00:07:11,900 --> 00:07:13,340
обратно на страницу с твитом.

147
00:07:13,340 --> 00:07:17,650
Итак, мы задали так, что бы
redirect_to выдавал 501 редирект
и не отображал

148
00:07:17,650 --> 00:07:18,820
промежуточное действие.

149
00:07:18,820 --> 00:07:22,230
Rails 3 имеет новый синтаксис.
Поэтому вы можете сделать redirect_to

150
00:07:22,230 --> 00:07:25,626
and и предупреждение
в одну линию.

151
00:07:25,626 --> 00:07:27,960
Но прежде чем мы посмотрим
как это работает в браузере

152
00:07:27,960 --> 00:07:30,990
мы вернёмся к
слоям и

153
00:07:30,990 --> 00:07:32,260
и добавим
один if.

154
00:07:32,260 --> 00:07:37,190
Итак, если предупреждение существует,
то выводим предупреждение

155
00:07:37,190 --> 00:07:38,980
в слой.

156
00:07:38,980 --> 00:07:41,600
Теперь если мы вернёмся
к странице со списком твитов

157
00:07:41,600 --> 00:07:42,620
то можем нажать кнопку Edit.

158
00:07:42,620 --> 00:07:44,540
Если мы не авторизированны,
нам выведется

159
00:07:44,540 --> 00:07:46,750
нужное предупреждение.

160
00:07:46,750 --> 00:07:49,160
Теперь, вернувшись к
контроллеру tweets, можно

161
00:07:49,160 --> 00:07:51,640
заметить, что edit, это не
единственное действие

162
00:07:51,640 --> 00:07:52,930
требующее авторизации.

163
00:07:52,930 --> 00:07:55,920
Edit, update, and destroy
тоже нуждаются

164
00:07:55,920 --> 00:07:57,290
в авторизации.

165
00:07:57,290 --> 00:08:00,660
Что ж, как нам не повторятся
лишний раз в нашем контроллере?

166
00:08:00,660 --> 00:08:02,950
Что ж, если вы посмотрите внутрь
всех action, то вы увидите, что

167
00:08:02,950 --> 00:08:05,945
каждый из них достаёт
твит.

168
00:08:05,945 --> 00:08:09,030
Они используют tweet find и
вытягивают текущий твит.

169
00:08:09,030 --> 00:08:11,590
Что ж, в Rails, как
можно сделать код поменьше?

170
00:08:11,590 --> 00:08:15,160
Мы возьмём этот код,
поднимем на верх, и зададим ему

171
00:08:15,160 --> 00:08:16,290
его собственный метод.

172
00:08:16,290 --> 00:08:18,890
Обернём его в метод и назовём
get_tweet.

173
00:08:18,890 --> 00:08:21,580
И выполнять get_tweet 
перед тем, как он начнёт фильтровать твиты.

174
00:08:21,580 --> 00:08:24,180
Это словно сказать контроллеру: 
"вызывай этот метод каждый раз до

175
00:08:24,180 --> 00:08:25,880
до определнного действия...".
И дальше мы можем конкретизировать.

176
00:08:25,880 --> 00:08:31,530
Вызывать его только когда происходит
edit, update или destroy.

177
00:08:31,530 --> 00:08:34,679
Теперь давайте вёрнмся
к авторизации.

178
00:08:34,679 --> 00:08:37,450
У нас есть код
нашей сессии.

179
00:08:37,450 --> 00:08:43,130
Мы обрнём его в метод
под название check_auth

180
00:08:43,130 --> 00:08:47,270
и как и раньше, мы можем указать
что бы он выполнял check_auth только

181
00:08:47,270 --> 00:08:49,740
с edit, update или destroy.

182
00:08:49,740 --> 00:08:53,340
Теперь у нас есть авторизация
для трех основных действий,

183
00:08:53,340 --> 00:08:56,590
что приводит нас к Зомби
упражнению номер 4
в котором тела

184
00:08:56,590 --> 00:08:59,170
начинают появлятся в твитах Зомби
намного чаще.

