1
00:00:00,710 --> 00:00:02,930
Я Грег Поллак, и вы смотрите
Rails для Зомби

2
00:00:02,930 --> 00:00:05,192
Эпизод 5.

3
00:00:05,192 --> 00:00:07,950
Расслабте ваши мозги
и остальные внутренности.

4
00:00:07,950 --> 00:00:13,142
самое время остановится
и поучится rails, 'потому что

5
00:00:13,142 --> 00:00:14,799
есть кое-что, что можно подчерпнуть.

6
00:00:14,799 --> 00:00:17,284
Rails для Зомби
от Envy Labs.

7
00:00:20,020 --> 00:00:24,260
В этом эпизоде, мы поговорим
о routing (роутинге).

8
00:00:24,260 --> 00:00:26,790
Теперь давайте ещё разок
вглянем на наш набор компонентов.

9
00:00:26,790 --> 00:00:29,550
Когда поступает запрос,
у нас есть два контроллера,

10
00:00:29,550 --> 00:00:33,630
наши модели, views, и теперь, у нас есть
ещё один, последний компонент,

11
00:00:33,630 --> 00:00:36,200
который называется routing (роутинг).

12
00:00:36,200 --> 00:00:39,040
Давайте посмотрим на наши
ссылки.

13
00:00:39,040 --> 00:00:42,955
Тут по порядку находятся все
пути для нашего link_to

14
00:00:42,955 --> 00:00:48,830
и для всех этих действий, 
нам нужно определить все routes.
(routes - маршруты)

15
00:00:48,830 --> 00:00:51,300
Мы делаем это в файле, который
находится в папке config,

16
00:00:51,300 --> 00:00:53,620
и называется он routes.rb.

17
00:00:53,620 --> 00:00:56,640
Если заглянуть в него, 
мы найдём что-то врде этого.

18
00:00:56,640 --> 00:01:00,010
Мы найдём такую комманду
ZombieTwitter::Application.routes.draw 

19
00:01:01,990 --> 00:01:04,849
Это, своего рода, пространство имён
в нашем приложении, а в нём

20
00:01:04,849 --> 00:01:06,760
находятся ресурсы наших твитов.

21
00:01:06,760 --> 00:01:11,530
Это, собственно, и создаёт то
что называется RESTful ресурс.

22
00:01:11,530 --> 00:01:14,800
Комманда resource
которая даёт нам все

23
00:01:14,800 --> 00:01:16,990
пути, которые мы
видели ранее.

24
00:01:16,990 --> 00:01:20,760
В общем, если у нас появляется путь
ссылки, он прикрепляется к

25
00:01:20,760 --> 00:01:23,590
URL твитов, который
отправляется в index action.

26
00:01:23,590 --> 00:01:26,460
Когда мы используем tweet в нашем 
link_to, он идёт по этому URL,

27
00:01:26,460 --> 00:01:28,550
который ведёт к show action.

28
00:01:28,550 --> 00:01:31,650
Когда мы делаем new_tweet_path,
то он идёт по этому URL, который

29
00:01:31,650 --> 00:01:35,660
ведет к new action, и
edit_tweet_path, который идёт

30
00:01:35,660 --> 00:01:38,400
по этому URL, который ведет, конечно же
к edit action.

31
00:01:38,400 --> 00:01:42,070
И есть ещё много
routes, коотрые при этом генерируются,

32
00:01:42,070 --> 00:01:44,440
по которым мы, пока что
не пойдём.

33
00:01:44,440 --> 00:01:47,480
Итак, как нам сделать
свои routes?

34
00:01:47,480 --> 00:01:51,100
К примеру, если мы хотим, что бы
new_tweet отображало то же,

35
00:01:51,100 --> 00:01:54,860
что и tweets/new.

36
00:01:54,860 --> 00:01:58,830
Что ж, tweets/new идёт в наш
контроллер tweets и вызывает

37
00:01:58,830 --> 00:02:00,750
новое действие.

38
00:02:00,750 --> 00:02:04,310
В этом случае, наш контроллер
 называется Tweets,

39
00:02:04,310 --> 00:02:07,380
а нашим действием будет new.

40
00:02:07,380 --> 00:02:12,810
Что бы сделать настраиваемый route,
мы пишем такое:

41
00:02:12,810 --> 00:02:15,320
 new_tweet =>Tweets#new.

42
00:02:15,320 --> 00:02:18,520
Твит с названием new, это и есть наш путь
очевидно, Tweets это наш

43
00:02:18,520 --> 00:02:22,510
контроллер, а new, конечно же
наше действие.

44
00:02:22,510 --> 00:02:25,650
Итак если мы выполним new_tweet 
в браузере, то

45
00:02:25,650 --> 00:02:28,450
это поднимет тот же view, что и
мы бы увидели если бы сделали

46
00:02:28,450 --> 00:02:30,190
tweets/new.

47
00:02:30,190 --> 00:02:34,080
Далее, как мы так сделали
что, когда мы переходим в /all,

48
00:02:34,080 --> 00:02:36,970
то происходит тоже действие, что и tweets.

49
00:02:36,970 --> 00:02:38,950
Хорошо, если мы взглянем в наш
контроллер, tweets вызывает

50
00:02:38,950 --> 00:02:40,370
index action.

51
00:02:40,370 --> 00:02:41,930
Итак, имя нашего
контроллера - Tweets.

52
00:02:41,930 --> 00:02:43,750
Наше действие называется index.

53
00:02:43,750 --> 00:02:47,540
Что бы всё получилось, мы делаем
match 'all' => Tweets#index.

54
00:02:47,540 --> 00:02:50,440
Но, что если мы захотим зпустить
все route внутри

55
00:02:50,440 --> 00:02:52,630
нашей ссылки?

56
00:02:52,630 --> 00:02:55,170
Что нам делать? tweets_path
явно не сработает.

57
00:02:55,170 --> 00:02:59,760
Хорошо, на самом деле, на нужно,
определить all_tweets.

58
00:02:59,760 --> 00:03:03,830
Это позволит нам
указать all_tweets_path

59
00:03:03,830 --> 00:03:05,960
внутри наше ссылки.
И так же оно будет вести

60
00:03:05,960 --> 00:03:07,540
в определенное место.

61
00:03:07,540 --> 00:03:10,640
Итак, как можно увидеть, когда мы проходим
по /all, то нам показывается

62
00:03:10,640 --> 00:03:13,250
список различных твитов.

63
00:03:13,250 --> 00:03:15,730
Что ж, что если мы хотим
поменять такое поведение

64
00:03:15,730 --> 00:03:18,290
и вместо отображения списка
перенаправлять

65
00:03:18,290 --> 00:03:20,530
по пути /tweets.

66
00:03:20,530 --> 00:03:23,470
Как нам это сделать?

67
00:03:23,470 --> 00:03:27,890
Итак, ещё раз, мы хотим что бы /all
перенаправляло по пути /tweets.

68
00:03:27,890 --> 00:03:33,780
Мы сделаем
 match all match 'all' => redirect('/tweets')

69
00:03:33,780 --> 00:03:36,450
Мы так же можем сделать
редирект на внешний сайт.

70
00:03:36,450 --> 00:03:40,480
Мы можем сделать
 match google redirect to Google.

71
00:03:40,480 --> 00:03:43,030
Достаточно просто.

72
00:03:43,030 --> 00:03:44,540
А что на счёт нашего корневого пути?

73
00:03:44,540 --> 00:03:48,130
Когда люди просто переходят по "/",
в своём приложении, то, что если

74
00:03:48,130 --> 00:03:51,010
мы захотим что после этого
отображались наши твиты?

75
00:03:51,010 --> 00:03:55,790
Мы можем просто сделать так
root :to => "Tweets#index"

76
00:03:55,790 --> 00:03:58,110
Итак, у нас тут есть контроллер
и действие.

77
00:03:58,110 --> 00:04:01,710
И если мы захотим вставить
это в ссылку мы просто сделаем
 root_path

78
00:04:01,710 --> 00:04:03,710
внутри нашей ссылки.

79
00:04:03,710 --> 00:04:05,780
А сейчас, давайте рассмотрим
некоторые параметры route.

80
00:04:05,780 --> 00:04:08,830
Что если мы захотим, что бы
у нас была возможность отправлять код в zip

81
00:04:08,830 --> 00:04:12,010
И запихнуть туда все зомби твиты.

82
00:04:12,010 --> 00:04:13,410
Как мы можем это сделать?

83
00:04:13,410 --> 00:04:15,080
Что ж, перво на перво, будет ли
это выглядеть так же, как

84
00:04:15,080 --> 00:04:16,120
контроллер?

85
00:04:16,120 --> 00:04:18,279
Итак можно проверить index action,
на наличие

86
00:04:18,279 --> 00:04:19,690
параметров zip кода.

87
00:04:19,690 --> 00:04:23,070
Если он существует, мы делаем запрос всех
твитов шде есть zip код

88
00:04:24,260 --> 00:04:27,490
Иначе, нам нужно перебрать все
твиты и затем, конечно,

89
00:04:27,490 --> 00:04:28,750
просто вывести их на страницу.

90
00:04:31,730 --> 00:04:34,460
Route, который сделает это
возможным, выглядит примерно так:

91
00:04:34,460 --> 00:04:38,090
'local_tweets/:zipcode' =>
'Tweets#index'

92
00:04:38,090 --> 00:04:40,690
Когда мы вставляем :zipcode
, то что бы не было отправлено

93
00:04:40,690 --> 00:04:44,260
сюда, по этому URL, станет параметром

94
00:04:44,260 --> 00:04:45,770
zip кода.

95
00:04:45,770 --> 00:04:50,090
Так же, если мы укажем имя, скажем
 local_tweets, то мы можем

96
00:04:50,090 --> 00:04:53,510
использовать link_to и делать
local_tweets_path, а затем посылать

97
00:04:53,510 --> 00:04:55,960
всё это дело в zip коде.

98
00:04:55,960 --> 00:04:59,030
Сейчас, если часто пользуетесь
 Твиттером, вы можете заметить такой формат

99
00:04:59,030 --> 00:05:03,150
в котором, в основном, мы видим
twitter.com/username.

100
00:05:03,150 --> 00:05:07,090
Как мы можем это применить
используя наши новые знания о роутах?

101
00:05:07,090 --> 00:05:10,800
Итак, в основном, ещё раз, мы хотим
сделать так, что бы клинкнув по имени

102
00:05:10,800 --> 00:05:12,470
выводились все твиты
этого зомби.

103
00:05:12,470 --> 00:05:14,560
Итак, если мы зайдём на /greggpollack,
то увидим

104
00:05:14,560 --> 00:05:16,580
все мои твиты.

105
00:05:16,580 --> 00:05:19,750
Что бы создать route, мы делаем
match ':name' => 'Tweet#index', :as => 'zombie_tweets'

106
00:05:19,750 --> 00:05:22,800
что позволит нам сделать

107
00:05:22,800 --> 00:05:24,700
zombie_tweets_path('greggpollack')

108
00:05:24,700 --> 00:05:25,490
в нашем link_to.

109
00:05:25,490 --> 00:05:28,520
Затем внутри контроллера,
 который может выглядеть

110
00:05:28,520 --> 00:05:32,170
как тут, где если
параметр name существует,

111
00:05:32,170 --> 00:05:35,010
то сделать запрос для этого зомби
и затем достать все

112
00:05:35,010 --> 00:05:37,860
твиты этого Зомби.

113
00:05:37,860 --> 00:05:40,590
Теперь, если мы хотим увидеть
твиты конкретного зомби,

114
00:05:40,590 --> 00:05:45,400
для примера, пусть это будет Ash, мы
просто идём по /Ash, и смотрим

115
00:05:45,400 --> 00:05:48,120
все его твиты.

116
00:05:48,120 --> 00:05:51,690
Что ж, пожалуй этого достаточно 
для пятого эпизода.

117
00:05:51,690 --> 00:05:56,680
Настало для Зомби упражнения
номер 5, где зомби

118
00:05:56,680 --> 00:05:58,580
становятся кровожаднее, а
мозги всё вкуснее и вкуснее.

