1
00:00:27,380 --> 00:00:29,850
Вы смотрите Git Real и это
Уровень Два, в котором

2
00:00:29,850 --> 00:00:32,450
мы собираемся поговорить о
staging и и тем что происходит удалёонно.

3
00:00:32,450 --> 00:00:34,980
Итак, скажем, вы в своём
локальном репозитории и вы внесли

4
00:00:34,980 --> 00:00:37,620
изменение в файл, но вы
не помните, что за

5
00:00:37,620 --> 00:00:41,550
изменение это было. Как, для примера,
файл лицензии вот тут.

6
00:00:41,550 --> 00:00:43,400
Что бы выяснить что за изменение
это было, вы можете выполнить

7
00:00:43,400 --> 00:00:45,160
комманду
git diff

8
00:00:45,160 --> 00:00:47,310
И вы сразу увидите.
Она покажет вам

9
00:00:47,310 --> 00:00:49,820
отличия в подготовительной стадии
с момента последнего commit.

10
00:00:49,820 --> 00:00:52,200
Красным будет обозначено
то, что было удалено, а зеленым

11
00:00:52,200 --> 00:00:54,420
то, что было добавлено.

12
00:00:54,420 --> 00:00:56,980
Результаты команды diffs
будет не так просто

13
00:00:56,980 --> 00:00:57,610
понять.

14
00:00:57,610 --> 00:01:00,430
К счастью, существует штука
которая облегчает чтение

15
00:01:00,430 --> 00:01:03,260
мы посмотрим на неё
в самом конце.

16
00:01:03,260 --> 00:01:04,890
Но давайте продолжим и добавим

17
00:01:04,890 --> 00:01:06,800
наш файл с лицензией в подготовительную зону.

18
00:01:06,800 --> 00:01:09,460
Однажды добавив его туда,
если мы наберем git diff снова

19
00:01:09,460 --> 00:01:12,690
ничего не выведетеся
потому что тут нет

20
00:01:12,690 --> 00:01:16,240
никаких различий с момента
изменений на последнем этапе.

21
00:01:16,240 --> 00:01:18,950
Если мы хотим посмотреть изменений
с помощью diff
на всех этапах

22
00:01:18,950 --> 00:01:22,640
мы можем написать git diff --staged.
И мы поличим тот же самый вывод

23
00:01:22,640 --> 00:01:25,400
на экране, что и был раньше.

24
00:01:25,400 --> 00:01:27,450
Итак, если мы сейчас запросим status
то мы увидим наш файл

25
00:01:27,450 --> 00:01:29,560
с лицензией
который помещен в потготовительный этап

26
00:01:29,560 --> 00:01:30,920
он готов к commit.

27
00:01:30,920 --> 00:01:33,620
Но, что если мы поместим в подготовительный этап

28
00:01:33,620 --> 00:01:35,210
то, что мы не хотели туда помещать?

29
00:01:35,210 --> 00:01:37,900
Потому что, имейте ввиду, у вас
может быть много изменений в файлах

30
00:01:37,900 --> 00:01:41,100
и возможно вы захотите взять два из них
и сделать только commit

31
00:01:41,100 --> 00:01:43,080
на одном из них, а потом взять ещё два
файла и сделать им

32
00:01:43,080 --> 00:01:44,130
следующий commit.

33
00:01:44,130 --> 00:01:46,900
Итак, как нам вытаскивать вещи обратно
из зоны подготовки?

34
00:01:46,900 --> 00:01:50,350
Ну вы заметите это в выводе git status
он скажет использовать

35
00:01:50,350 --> 00:01:54,460
git, reset, HEAD, а затем
имя файла для вытаскивания
из зоны подготовки.

36
00:01:54,460 --> 00:01:57,070
Дальше, когда вы запустите все эти команды
вы увидете, как на говорят, что

37
00:01:57,070 --> 00:01:59,360
файл с лицензией был исключен.

38
00:01:59,360 --> 00:02:02,900
Вы можете удивиться,
что это за команда такая HEAD

39
00:02:02,900 --> 00:02:07,860
Ну, HEAD относится к последнему
commit в текущей ветке,

40
00:02:07,860 --> 00:02:10,199
или линии времени
на которой мы находимся.

41
00:02:10,199 --> 00:02:13,000
Теперь если мы запустим git status
мы увидим, что файл с лицензией

42
00:02:13,000 --> 00:02:15,810
не в подготовительной зоне,
но в нём всё равно есть

43
00:02:15,810 --> 00:02:17,130
изменения.

44
00:02:17,130 --> 00:02:19,660
Но что если мы вдруг передумали
и мы не хотим этих

45
00:02:19,660 --> 00:02:20,700
изменений?

46
00:02:20,700 --> 00:02:24,770
Что если мы хотим вернуть его
в состояние в котором он был

47
00:02:24,770 --> 00:02:28,440
в последний commit, или
в последнее изменение?

48
00:02:28,440 --> 00:02:32,780
Что ж, мы может сделать
git checkout --"имя файла"

49
00:02:33,720 --> 00:02:35,730
Итак мы сделали это и мы запустили
git status заново, теперь мы

50
00:02:35,730 --> 00:02:37,610
мы увидим, что этот фалй
вернулся в своё

51
00:02:37,610 --> 00:02:40,320
прежнее состояние.

52
00:02:40,320 --> 00:02:42,470
Теперь давайте продолжим и внесем
изменения в readme, говоря

53
00:02:42,470 --> 00:02:44,440
о том, как пирожок может быть обманчив.
(я хз, что он имел ввиду)

54
00:02:44,440 --> 00:02:47,710
если мы хотим сделать commit для
этих изменений, мы должны были бы добавить его

55
00:02:47,710 --> 00:02:49,510
и только затем сделать commit.

56
00:02:49,510 --> 00:02:51,140
Короче говоря.

57
00:02:51,140 --> 00:02:54,250
Мы можем замутить git commit -a, -m,

58
00:02:54,250 --> 00:02:55,520
на пояснении к commit.
(commit message)

59
00:02:55,520 --> 00:02:57,840
На самом деле, всё, что делает
это добавляет любой наш

60
00:02:57,840 --> 00:03:02,110
отслеживаемый файл в подготовительную стадию
и потом делает commit.

61
00:03:02,110 --> 00:03:05,250
Ньюанс здесь заключается в том
не добавит файлы

62
00:03:05,250 --> 00:03:06,870
которые мы не собираемся отслеживать.

63
00:03:06,870 --> 00:03:09,440
Поэтому, если мы создали новый файл
и запустили эту комманду

64
00:03:09,440 --> 00:03:13,650
что ж, он не будет добавлен в commit.

65
00:03:13,650 --> 00:03:16,040
Однажды настанет такое время
когда вы запустите Git

66
00:03:16,040 --> 00:03:18,060
и соберетесь сделать commit
но потом

67
00:03:18,060 --> 00:03:21,740
моментально об этом пожалеете.
Потому что, веротяно, вы забыли добавить

68
00:03:21,740 --> 00:03:23,990
добавить файл или сделать какие-нибудь
изменения

69
00:03:23,990 --> 00:03:25,270
которые хтели сделать.

70
00:03:25,270 --> 00:03:26,550
Что с этим делать?

71
00:03:26,550 --> 00:03:29,470
К счастью у нас в арсенале есть комманда
git reset

72
00:03:29,470 --> 00:03:32,660
она отменит последний commit и
перенесет всё из этого commit

73
00:03:32,660 --> 00:03:35,540
обратно в зону подготовки.

74
00:03:35,540 --> 00:03:38,710
Итак, комманда HEAD которую вы видите
с небольшой морковочкой в конце,

75
00:03:38,710 --> 00:03:42,520
это говорит о том, что надо продвинуться
на один commit назад

76
00:03:42,520 --> 00:03:44,290
до нынешнего HEAD.

77
00:03:44,290 --> 00:03:46,600
Итак, тепер если запустить git status
можно увидеть что наши изменения

78
00:03:46,600 --> 00:03:48,860
из этого commit
теперь в зоне подготовки.

79
00:03:48,860 --> 00:03:53,200
Я могу делать изменения, добавлять файлы
если захочу и сделать
commit повторно

80
00:03:53,200 --> 00:03:57,150
Другой способ что-то зименять commit
это использовать опцию корректировки.

81
00:03:57,150 --> 00:04:00,910
Итак, если мы вдруг захотели
добавить todo.txt к нашемму последнему

82
00:04:00,910 --> 00:04:04,450
commit, мы можем просто добавить его
в зону подготовкии потом сделать
git commit --amend

83
00:04:04,450 --> 00:04:07,760
И это добавит наш файл к последнему commit

84
00:04:09,180 --> 00:04:11,970
И затем, если мы захотим, мы можем
добавить описание commit

85
00:04:11,970 --> 00:04:13,770
которое перезапишет
существуещее описание commit

86
00:04:20,790 --> 00:04:22,810
Тут две команды, которые
мы только что прошли.

87
00:04:22,810 --> 00:04:25,540
У нас есть git reset
который откатит обратно

88
00:04:25,540 --> 00:04:27,030
последний commit.

89
00:04:27,030 --> 00:04:29,970
И так же есть git commit amend
который добавит то, что нужно

90
00:04:29,970 --> 00:04:31,100
к последнему commit.

91
00:04:31,100 --> 00:04:33,110
Есть ещё пару вещей,
которые вам стоит знать.

92
00:04:33,110 --> 00:04:36,650
Если вы хотите сделать git reset,
жесткий HEAD, то это

93
00:04:36,650 --> 00:04:38,230
снесет нафиг последний commit.

94
00:04:38,230 --> 00:04:42,160
Поэтому если что-то поейдёт совсем не так
и вы хотите это нафиг снести,

95
00:04:42,160 --> 00:04:43,890
вы запускаете команду hard HEAD.

96
00:04:43,890 --> 00:04:46,810
Но что если вы захотите
отменить последний commits?

97
00:04:46,810 --> 00:04:50,380
Что ж, добавьте ещё одну морковочку
в конце.

98
00:04:50,380 --> 00:04:53,140
Это нафиг снесет
два последних commits до

99
00:04:53,140 --> 00:04:54,990
нынешнего HEAD.

100
00:04:54,990 --> 00:04:57,680
Итак, до сих пор, мы работали
с нашим локальным

101
00:04:57,680 --> 00:05:01,880
репозиторием на нашем компьютере,
но как мы сможем выложить наш

102
00:05:01,880 --> 00:05:05,840
репозиторий для других людей
что бы они смогли поучавствовать в процессе?

103
00:05:05,840 --> 00:05:08,470
Что ж, это то место где появляются комманды
push и pull

104
00:05:08,470 --> 00:05:12,140
Что ж, вот он я в моей локальной мастер ветке,
я могу выложить её

105
00:05:12,140 --> 00:05:15,540
в удалённый репозиторий и затем
остальные могут вытащит его себе

106
00:05:15,540 --> 00:05:17,730
в репозиторий и начать
делать изменения.

107
00:05:17,730 --> 00:05:19,490
И когда они закончат,
смогут залить обратно

108
00:05:19,490 --> 00:05:21,550
свои изменения.

109
00:05:21,550 --> 00:05:23,790
Мы имеем дело с удаленными
репозиториями. Это всё

110
00:05:23,790 --> 00:05:25,350
удалённые комманды git
к которым мы обратимся

111
00:05:25,350 --> 00:05:27,110
через минутку.

112
00:05:27,110 --> 00:05:29,230
Другая вещь, которую стоит упомянуть
это то, что Git

113
00:05:29,230 --> 00:05:31,810
не заботится
для вас о контроле доступа.

114
00:05:31,810 --> 00:05:35,120
Нельзя взять и сказать:
"только у вот этих людей будет доступ

115
00:05:35,120 --> 00:05:37,310
к этому репозиторию, и только
и только эта группа людей будет

116
00:05:37,310 --> 00:05:38,940
иметь доступ к вот этому репозиторию."

117
00:05:38,940 --> 00:05:40,635
Здесь вам понадобится дополнительное
програмное обеспечение.

118
00:05:40,635 --> 00:05:44,260
Вы либо захотите использовать
такие хостинги, как

119
00:05:44,260 --> 00:05:46,350
GitHub или BitBucket, что бы они позаботились

120
00:05:46,350 --> 00:05:47,590
для вас о контроле доступа .

121
00:05:47,590 --> 00:05:50,050
Или если вы хотите развернуть свой
собственный, можете попробовать

122
00:05:50,050 --> 00:05:53,400
что-нибудь вроде Gitosis или Gitorious и
они позаботятся о контроле

123
00:05:53,400 --> 00:05:55,910
всей этой темы и
конфигурации.

124
00:05:55,910 --> 00:05:58,870
Если мы хотим завести свой
репозиторий на GitHub, нам нужно

125
00:05:58,870 --> 00:06:01,510
создать GitHub аккаунт и
затем мы можем создать

126
00:06:01,510 --> 00:06:02,820
новый репозиторий на GitHub.

127
00:06:02,820 --> 00:06:05,030
Нам покажут форму, которая
выглядит вот так.

128
00:06:05,030 --> 00:06:08,570
Мы указываем имя репозитория
и затем выбираем

129
00:06:08,570 --> 00:06:09,730
пару вариантов.

130
00:06:09,730 --> 00:06:12,920
Как только мы его создали, GitHub
даст нам URL ссылку.

131
00:06:12,920 --> 00:06:15,570
Что бы наше дело залить на GitHub, для начала
нам надо запустить Git,

132
00:06:15,570 --> 00:06:18,240
remote, add, origin.

133
00:06:18,240 --> 00:06:19,960
Origin - это удалённое имя.

134
00:06:19,960 --> 00:06:23,190
Мы можем дать ему любое имя, но,
мы обычно ссылаемся на наш

135
00:06:23,190 --> 00:06:27,170
канонический репозиторий, наш
оффициальный репозиторий, которым

136
00:06:27,170 --> 00:06:30,570
большинство наших людей
использовали наш проект как основой (origin).

137
00:06:30,570 --> 00:06:32,280
Итак, "оригинальный" (origin),
так его и назовём.

138
00:06:32,280 --> 00:06:36,290
И потом укажем URL ссылку,
 которую GitHub дал нам.

139
00:06:36,290 --> 00:06:38,320
Что бы получить список всех удаленных вещей (remotes)
 о которых знает наш локальный

140
00:06:38,320 --> 00:06:42,400
репозиторий, мы можем
просто написать git remote -v.

141
00:06:42,400 --> 00:06:47,590
На самом деле мы пока ещё
не залили наш репозиторий.

142
00:06:47,590 --> 00:06:51,110
Эти remotes
как закладки.

143
00:06:51,110 --> 00:06:55,840
Мы делаем закладки на
на URL ссылки оригинала, который

144
00:06:55,840 --> 00:06:57,850
в свою очередь может содержать
в себе другие репозитории.

145
00:06:57,850 --> 00:07:01,670
Теперь, если мы захотим залить наш
репозиторий, мы просто напишем
git push

146
00:07:01,670 --> 00:07:05,650
указывая имя удалённого
который, конечно же

147
00:07:05,650 --> 00:07:09,340
оригинальный. И указываем локальную ветку
которую мы хотим залить туда.

148
00:07:09,340 --> 00:07:11,670
В данном случае, это мастер ветка (master branch).

149
00:07:11,670 --> 00:07:13,285
Поскольку мыиспользуем GitHub,
нас спросят

150
00:07:13,285 --> 00:07:18,310
имя пользователя и пароль от GitHub
для авторизации что бы залить (push) всё это дело

151
00:07:18,310 --> 00:07:19,660
на удаленный GitHub.

152
00:07:19,660 --> 00:07:22,250
Теперь если вам не хочется каждый раз вводить
юзернейм и пароль

153
00:07:22,250 --> 00:07:24,800
что бы делать push,
 вам надо будт пройти

154
00:07:24,800 --> 00:07:27,620
по этой ссылке внизу
которая закеширует пароль (password caching)

155
00:07:27,620 --> 00:07:31,020
В общем вам нужно сделать это
только один раз.

156
00:07:31,020 --> 00:07:33,800
Итак, мы залили на локальный
репозиторий на GitHub

157
00:07:33,800 --> 00:07:37,010
сейчас, если мы откроем
браузер и обновим страницу

158
00:07:37,010 --> 00:07:39,910
мы увидим, что GitHub теперь
знает о нашем репозитории

159
00:07:39,910 --> 00:07:40,980
и всей информации, что хранится в нём.

160
00:07:40,980 --> 00:07:43,130
На этой странице можно заметить
что есть кнопка commit и

161
00:07:43,130 --> 00:07:44,310
и кнопка history (история).

162
00:07:44,310 --> 00:07:47,320
Если мы нажмём на них, то в общем-то,
получим туже информацию

163
00:07:47,320 --> 00:07:49,070
что и раньше, делая
git log.

164
00:07:49,070 --> 00:07:53,350
Мы можем просматривать все
commits внутри нашего репозитория.

165
00:07:53,350 --> 00:07:56,800
Итак, мы залили наш репозиторий на
GitHub, но теперь

166
00:07:56,800 --> 00:07:58,400
можем ли мы вытянуть его обратно?

167
00:07:58,400 --> 00:08:00,380
Как нам это сделать?

168
00:08:00,380 --> 00:08:03,130
Ну, для этого есть комманда 
git pull.

169
00:08:03,130 --> 00:08:04,950
Это то, что вы захотите запустить
когда знаете, что другие люди

170
00:08:04,950 --> 00:08:06,760
сделали каки-нибудь изменения,
вы ведь не единственный

171
00:08:06,760 --> 00:08:08,950
кто работает над проектом,
и вы захотите

172
00:08:08,950 --> 00:08:09,850
получить изменения, сделанные ими.

173
00:08:09,850 --> 00:08:11,070
Вы запускаете git pull.

174
00:08:11,070 --> 00:08:15,230
Это зайдёт на GitHub, 
вытянет из него изменения

175
00:08:15,230 --> 00:08:17,970
и синхронизирует с вашим локальным репозиторием.

176
00:08:17,970 --> 00:08:22,590
Итак у нас есть GitHub, как канонический
удалённое хранилище, которые мы назвали "origin"

177
00:08:22,590 --> 00:08:25,340
но обычно проект не хранится
на разных удалённых сервисах.

178
00:08:25,340 --> 00:08:28,850
У нас может быть тестовый сервер
который будет выполнять для нас тесты

179
00:08:28,850 --> 00:08:31,960
переодически мы будем делать туда push
нашего репозитория.

180
00:08:31,960 --> 00:08:35,600
У нас может быть хостинг провайдер
на котором будет лежать

181
00:08:35,600 --> 00:08:39,039
наш конечный код и мы можем захотеть
залить наш репозиторий

182
00:08:39,039 --> 00:08:42,890
на наш продакшн сервер
на котором будет хостится наш код.

183
00:08:42,890 --> 00:08:45,960
Как мы заметили ранее, что бы добавить 
новое удалённое место хранения (remote),
нужно использовать вот такой синтаксис,

184
00:08:45,960 --> 00:08:49,370
git remote add "имя",
это может быть любое имя, и

185
00:08:49,370 --> 00:08:50,600
затем адрес.

186
00:08:50,600 --> 00:08:54,670
Что бы удалить remotes мы просто делаем
git remote rm

187
00:08:54,670 --> 00:08:55,570
и указываем имя.

188
00:08:55,570 --> 00:08:58,470
И наконец, что бы залить репозиторий
на удалённые сервера (remotes), мы запускаем

189
00:08:58,470 --> 00:09:00,870
git push -u и указываем имя

190
00:09:00,870 --> 00:09:02,780
и нужную ветку.

191
00:09:02,780 --> 00:09:05,600
Вы можете спросить, что тут делает -u?

192
00:09:05,600 --> 00:09:08,760
Она просто делает так, что
в следующий раз, когда вы сделаете
 git push

193
00:09:08,760 --> 00:09:10,560
вам не нужно будет указывать
имя и ветку.

194
00:09:10,560 --> 00:09:14,220
Вы сможете просто написать git push.

195
00:09:14,220 --> 00:09:16,760
И наконец, я хочу рассказать о
Heroku - это плтформа для хостинга

196
00:09:16,760 --> 00:09:18,300
И как они используют remotes.

197
00:09:18,300 --> 00:09:20,630
Итак, если у вас есть Heroku аккаунт
и вы установили

198
00:09:20,630 --> 00:09:23,940
Heroku gem, и вы работаете над своим кодом

199
00:09:23,940 --> 00:09:27,250
heroku даёт вам
несколько полезных штук.

200
00:09:27,250 --> 00:09:30,640
Во-первых, это
ssh адресс git репозитория.

201
00:09:30,640 --> 00:09:35,090
Теперь до того как, начали использовать ссылку URL,
 GitHub даст нам URL.

202
00:09:35,090 --> 00:09:37,480
Просто, проводя много времени,
работая с git репозиторием

203
00:09:37,480 --> 00:09:40,640
вам может понадобиться
ssh адресс.

204
00:09:40,640 --> 00:09:44,690
Как вы можете заметить, Heroku
уже встроен remote.

205
00:09:44,690 --> 00:09:47,090
Это дело называется remote heroku.

206
00:09:47,090 --> 00:09:50,650
И когда мы захотим сделат push нашего
кода в Heroku, мы просто напишем

207
00:09:50,650 --> 00:09:53,900
git push heroku master

208
00:09:53,900 --> 00:09:56,820
Это сделает push нашего локального
репозитория в Heroku.

209
00:09:56,820 --> 00:10:02,320
И когда Heroku получит код,
она развернет наш код.
(сделает deploy)

210
00:10:02,320 --> 00:10:05,180
Последняя вещь перед тем, как закончить
Уровень Два, запомните

211
00:10:05,180 --> 00:10:07,490
это те команды, которыми
вы можете откатиться назад

212
00:10:07,490 --> 00:10:09,130
Сommits, сносим нафиг commits.

213
00:10:09,130 --> 00:10:13,000
В общем вы захотите ими воспользоваться
только до того как сделали commit, да?

214
00:10:14,150 --> 00:10:17,590
Потому, что если есть какие-нибудь commit
и вы сделали push, а затем

215
00:10:17,590 --> 00:10:21,380
внесли локальные изменения, это
как будто вы поменяли ход истории

216
00:10:21,380 --> 00:10:24,130
И как мы все знаем,
это довольно опасная фигня

217
00:10:24,130 --> 00:10:26,000
Поэтому не делайте так.

218
00:10:26,000 --> 00:10:29,070
Пришло время окнуться
в упражнения и Git Real

