1
00:00:26,680 --> 00:00:28,230
Вы смотрите Git Real.

2
00:00:28,230 --> 00:00:29,190
Меня зовут Оливер Лакан.
(Olivier Lacan)

3
00:00:29,190 --> 00:00:30,360
И это Уровень 3.

4
00:00:30,360 --> 00:00:33,610
Мы поговорим с вами о
Клонировании и Ветвлении.

5
00:00:33,610 --> 00:00:35,810
Итак на уровне 2,мы наблюдали, как
Грег заливал

6
00:00:35,810 --> 00:00:37,110
репозиторий на GitHub.

7
00:00:37,110 --> 00:00:39,910
А сейчас, допустим, ещё одиному коллеге,
назовём её Джейн, понадобились эти файлы.

8
00:00:39,910 --> 00:00:42,970
Она спросит, что-то вроде,
"Где мне взять эти файлы"?

9
00:00:42,970 --> 00:00:45,760
А Грег ответит ей
"просто скопируй репозиторий".

10
00:00:46,540 --> 00:00:48,270
Так как же это сделать?

11
00:00:48,270 --> 00:00:50,620
Если вы используете, скажем
GitHub, вы пойдёте в репозиторий

12
00:00:50,620 --> 00:00:54,750
возьмёте URL адресс
этого репозитория.

13
00:00:54,750 --> 00:00:57,930
вернётесь к командной строке
напишите в ней git clone потом

14
00:00:57,930 --> 00:01:01,710
наш URL, и это создаст локальную
директорию

15
00:01:01,710 --> 00:01:02,840
с этим репозиторием.

16
00:01:02,840 --> 00:01:04,739
У неё будет тоже имя
что и у репозитория

17
00:01:04,739 --> 00:01:05,990
с которым мы имеем дело.

18
00:01:05,990 --> 00:01:08,050
Если вы хотите поменять имя
на другое

19
00:01:08,050 --> 00:01:11,110
то вы можете просто сделать опять,
 git clone URL
и задать имя,

20
00:01:11,110 --> 00:01:12,360
например, git demo.

21
00:01:15,330 --> 00:01:17,320
Первым делом git clone
скопирует

22
00:01:17,320 --> 00:01:18,090
репозиторий.

23
00:01:18,090 --> 00:01:21,950
Во-вторых
создаст remote в origin

24
00:01:21,950 --> 00:01:23,990
и поместит его в URL ссылку
по которой надо пройти.

25
00:01:23,990 --> 00:01:27,630
Мы можем проверить это просто запустив
git remote -v

26
00:01:27,630 --> 00:01:30,490
И это выдаст список всех remotes, поэтому
вы увидите origin и любой

27
00:01:30,490 --> 00:01:31,930
URL, по которому мы прошли.

28
00:01:31,930 --> 00:01:34,600
И наконец, будет проверена
первоначальная ветка

29
00:01:34,600 --> 00:01:40,070
 скорее всего master
и сдесь будет установлен HEAD.

30
00:01:40,070 --> 00:01:42,160
Итак, Джейн всё настроила, но
она же захочет

31
00:01:42,160 --> 00:01:42,990
поработать со всем этим делом.

32
00:01:42,990 --> 00:01:45,650
Для этого, лучше всего
создать новую ветку.

33
00:01:45,650 --> 00:01:47,570
Итак мы создадим
ветку под названием "cat".

34
00:01:47,570 --> 00:01:50,030
git branch cat
создаст эту ветку

35
00:01:55,440 --> 00:01:57,930
Но если мы проверим git branch,
мы увидим, что до сих пор

36
00:01:57,930 --> 00:01:59,180
наъодимся на master ветке.

37
00:02:01,710 --> 00:02:04,250
Что бы попасть на нашу ветку "cat",нам понадобиться сделать так

38
00:02:04,250 --> 00:02:05,860
 git checkout cat

39
00:02:05,860 --> 00:02:08,430
Когда вы так делаете,
на самом деле просто

40
00:02:08,430 --> 00:02:10,009
переключаются временны́е линии.

41
00:02:10,009 --> 00:02:12,900
Мы больше не на временно́й
линии master.

42
00:02:12,900 --> 00:02:14,080
У нас другая линия времени.

43
00:02:14,080 --> 00:02:17,110
Мы можем делать всё что захотим,
а потом вернуться в master

44
00:02:17,110 --> 00:02:19,690
когда это понадобиться.

45
00:02:19,690 --> 00:02:21,900
Мы запустим вот эту команду сейчас

46
00:02:21,900 --> 00:02:25,150
и она создаст файл cat.txt,
и внутри него поместист слово

47
00:02:25,150 --> 00:02:26,190
Щрёдингер
(Schrodinger)

48
00:02:26,190 --> 00:02:29,430
Потом мы поместим всё это дело
в промежуточную зону, сделаем commit

49
00:02:29,430 --> 00:02:32,150
и добавим комментарий к этому commit: "Создаётся
квантовый котейко."  И этот  commit

50
00:02:32,150 --> 00:02:35,150
добавится к нашей линии времени "cat",
а не в master ветку

51
00:02:38,940 --> 00:02:42,110
Если мы напишем комманду "ls", что бы
вывести все файлы

52
00:02:42,110 --> 00:02:44,560
в текущей дериктории, то вы увидите
что у нас есть readme.txt файл

53
00:02:44,560 --> 00:02:47,205
который создал Грег, 
и наш файл cat.txt

54
00:02:47,205 --> 00:02:48,490
который мы только что создали.

55
00:02:48,490 --> 00:02:52,170
Теперь, если мы вернемся к нашему master,
используя git checkout master

56
00:02:52,170 --> 00:02:56,080
и введем ту же команду, мы не увидим
никакого cat.txt файла.

57
00:02:56,080 --> 00:02:59,190
Его там нет, он не существует
в этой линии времени.

58
00:02:59,190 --> 00:03:01,960
Теперь, если мы запустим git log, тоже
самое, никакого commit.

59
00:03:01,960 --> 00:03:06,300
Нашего "Создаётся квантовый котейко"
commit тут нет.

60
00:03:06,300 --> 00:03:08,710
Просто, что бы убедиться что мы сошли с ума
если мы переключимся обратно на

61
00:03:08,710 --> 00:03:11,980
на нашу ветку "cat" и выполним "ls" комманду
опять, файл cat.txt

62
00:03:11,980 --> 00:03:15,230
всё ещё тут,
мы не сумасшедшие.

63
00:03:15,230 --> 00:03:17,340
Итак давайте предположим, что мы закончили


64
00:03:17,340 --> 00:03:18,340
веткой "cat".

65
00:03:18,340 --> 00:03:21,300
Мы собираемся вернуться к ветке master
сделаем git checkout master.

66
00:03:21,300 --> 00:03:24,330
И сейчас самое время соединить
эти две линии времени.

67
00:03:24,330 --> 00:03:26,930
Это, должно быть, необычно звучит,
но вообще-то это довольно просто.

68
00:03:26,930 --> 00:03:28,770
git merge cat.

69
00:03:28,770 --> 00:03:32,730
Сейчас мы в ветке master и 
git присоединит ветку "cat"

70
00:03:32,730 --> 00:03:36,300
о оно выведет нам, что
всё сделано.

71
00:03:36,300 --> 00:03:37,720
выведет "fast forward".

72
00:03:37,720 --> 00:03:39,650
Что же это значит?

73
00:03:39,650 --> 00:03:43,410
Что ж, когда мы создаём ветку и
делаем один или несколько commit

74
00:03:43,410 --> 00:03:46,890
и ничего не делаем с остальными ветками
то это очень просто для Git

75
00:03:46,890 --> 00:03:50,390
Можно соединить ветку "cat"
 в master ветку, потому что

76
00:03:50,390 --> 00:03:53,140
потому что в master ветке
не было никаких изменения на тот момент.

77
00:03:53,140 --> 00:03:55,370
И теперь, когда мы закончили
можно спокойно удалить

78
00:03:55,370 --> 00:03:58,950
ветку "cat", запустив git branch -d cat

79
00:03:58,950 --> 00:04:02,140
И Git выдаст, что он
 в общем-то сделал это.

80
00:04:02,140 --> 00:04:05,110
Наша следующая задача, поработать
над админскими фишками

81
00:04:05,110 --> 00:04:06,160
нашего приложения.

82
00:04:06,160 --> 00:04:08,510
И нам нужно создать новую ветку
что бы над ней поработать.

83
00:04:08,510 --> 00:04:12,000
Что бы это сделать мы будем использовать
простую команду

84
00:04:12,000 --> 00:04:14,210
git checkout -b admin.

85
00:04:14,210 --> 00:04:18,180
Флаг -b создавая новую ветку,
затем проверят её.

86
00:04:18,180 --> 00:04:20,620
Теперь мы сделаем кучу изменений
таких как

87
00:04:20,620 --> 00:04:25,630
создадим dashboard.html файл
добавим его в подготовительную зону
и сделаем commit.

88
00:04:25,630 --> 00:04:28,500
Добавим файл users.html
и опять же сделаем commit.

89
00:04:28,500 --> 00:04:31,340
И, как вы можете видеть
на вот этом вот графике, каждый раз

90
00:04:31,340 --> 00:04:33,680
делая commit, наш HEAD
при этом двигается.

91
00:04:33,680 --> 00:04:36,330
Итак, мы работаем над нашей
админской веткой и тут,

92
00:04:36,330 --> 00:04:39,080
поздней ночью приходит сообщение от босса
в котором говоиться: "О, вот тут вот баг есть

93
00:04:39,080 --> 00:04:40,910
в master ветке, тебе нужно
его исправить."

94
00:04:40,910 --> 00:04:44,220
И на прийдётся всё бросить и
сделать git checkout master.

95
00:04:44,220 --> 00:04:45,910
Мы можем запустить git branch
что бы убедиться

96
00:04:45,910 --> 00:04:47,470
что мы находимся на master ветке.

97
00:04:47,470 --> 00:04:50,350
И затем мы сделаем pull
 удалённого репозитория,

98
00:04:50,350 --> 00:04:52,740
что бы убедиться, что у нас есть
самые последние изменения.

99
00:04:52,740 --> 00:04:56,800
Затем мы будем исправлять
файл store.rb

100
00:04:56,800 --> 00:04:59,130
и product.rb.

101
00:04:59,130 --> 00:05:01,690
И наконец, мы собираемся залить (сделать push)
с этими изменениями

102
00:05:01,690 --> 00:05:04,490
в master remote.

103
00:05:04,490 --> 00:05:06,850
Теперь когда мы исправили все файлы,
самое время

104
00:05:06,850 --> 00:05:08,110
опять заняться нашей
особенной веткой.

105
00:05:08,110 --> 00:05:12,230
Поэтому мы делаем
git checkout admin

106
00:05:12,230 --> 00:05:14,070
Итак, мы закончили делать наши изменеия.

107
00:05:14,070 --> 00:05:16,700
делаем git checkout master
теперь мы готовы к слиянию веток

108
00:05:16,700 --> 00:05:19,600
К master ветке
присоединить нашу admin ветку.

109
00:05:19,600 --> 00:05:21,980
Внезапно, вы в
чудно́м редакторе.

110
00:05:21,980 --> 00:05:23,890
Без паники, это Vi.

111
00:05:23,890 --> 00:05:27,040
Вы могли видеть такое раньше,
но чисто на всякий случай, вот вам

112
00:05:27,040 --> 00:05:29,720
комманды внизу экрана
что бы использовать Vi.

113
00:05:29,720 --> 00:05:33,960
Тут Git просто спрашивает вас "Oк,
я тут сделал сообщения для commit

114
00:05:33,960 --> 00:05:35,990
для тебя потому, что я наблюдал
за тем, что ты пытался сделать

115
00:05:35,990 --> 00:05:37,640
Ты пытался соединить вот эти две ветки.

116
00:05:37,640 --> 00:05:40,260
Но, что бы выражаться яснее
добавь пожалуйста

117
00:05:40,260 --> 00:05:41,200
это сообщение сверху.

118
00:05:41,200 --> 00:05:44,300
Как можно заметить, оно выдало
merge branch admin.

119
00:05:44,300 --> 00:05:46,390
Вы можете изменить этот комментарий
если нужно.

120
00:05:46,390 --> 00:05:50,790
И затем, когды вы закончили, нажмите
клавишу двоеточия и "w" для записи, и q

121
00:05:50,790 --> 00:05:55,890
что бы выйти и вернуться к
командной строке.

122
00:05:55,890 --> 00:05:59,100
Как только мы соединили две ветки
с двумя наборами изменений

123
00:05:59,100 --> 00:06:01,290
Git сделал рекурсивное слияние.

124
00:06:01,290 --> 00:06:05,440
Когда так происходит Git создаёт
commit прямо тут,

125
00:06:05,440 --> 00:06:08,500
где ветви были соеденины вместе.

126
00:06:08,500 --> 00:06:11,370
Если вы загляните в ваш log,
вы увидите, что эти

127
00:06:11,370 --> 00:06:13,950
commit были на самом деле созданы
и записаны в log.

128
00:06:13,950 --> 00:06:17,780
Всё это дело  не содержат никаких файлов,
Оно просто сообщает нам

129
00:06:17,780 --> 00:06:22,720
что в этой точке, master и admin
стали одной веткой.

130
00:06:22,720 --> 00:06:24,160
Спасибо за просмотр
Уровня Три.

131
00:06:24,160 --> 00:06:26,630
Настало время вам поиграться
с ветками и слияниями

132
00:06:26,630 --> 00:06:27,880
в упражнениях.

