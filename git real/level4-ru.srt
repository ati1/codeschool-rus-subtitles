1
00:00:27,110 --> 00:00:28,300
Вы смотретие Git Real.

2
00:00:28,300 --> 00:00:30,470
И это Уровень Четыре, where
мы собираемся рассмотреть

3
00:00:30,470 --> 00:00:32,560
разные ситуации при совместной работе

4
00:00:32,560 --> 00:00:35,440
Что будет, если всё пойдёт
не так гладко, как

5
00:00:35,440 --> 00:00:38,550
показывал Оливер
в предыдущем уровне.

6
00:00:38,550 --> 00:00:39,970
Итак, у нас есть Грег.
он заливает свой код

7
00:00:39,970 --> 00:00:41,230
на github.

8
00:00:41,230 --> 00:00:42,930
И Джейн, конечно же,
нужна его копия.

9
00:00:42,930 --> 00:00:47,430
Как мы успели заметить, Джейн собирается
клонировать копию с github

10
00:00:47,430 --> 00:00:49,580
и затем она хочет
добавить каких нибудь изменений.

11
00:00:49,580 --> 00:00:52,010
Итак, давайте продолжим
эту линию времени.

12
00:00:52,010 --> 00:00:53,510
Короче, она добавляет изменения.

13
00:00:53,510 --> 00:00:55,990
Как вы можете видеть
тут у нас 2 новых файла.

14
00:00:55,990 --> 00:00:59,630
Мы запустим git add --all,
что бы эти файлы добавить.

15
00:01:04,349 --> 00:01:05,960
Затем она делает pushe на
github

16
00:01:05,960 --> 00:01:07,250
когда она закончила с изменениями.

17
00:01:07,250 --> 00:01:10,510
Представим, что её commit
это вот этот

18
00:01:10,510 --> 00:01:13,350
маленький розовый pink тут внизу.

19
00:01:13,350 --> 00:01:14,690
Теперь вернёмся
к Грегу.

20
00:01:14,690 --> 00:01:18,780
Видите, Грег так же работает
в тоже самое время, что и Джейн

21
00:01:18,780 --> 00:01:22,770
И Грег делает commit, в основном
добавляя изменения в фай readme.

22
00:01:22,770 --> 00:01:27,040
Итак у нас теперь есть commit Джейн
который уже лежит на github

23
00:01:27,040 --> 00:01:29,770
и локальный commit Грега,
который находится в его

24
00:01:29,770 --> 00:01:32,770
локальном репозитории.
И они отличаются.

25
00:01:32,770 --> 00:01:36,000
Итак, что нам теперь, на данный
момент делать?

26
00:01:36,000 --> 00:01:39,090
Если сейчас Грег попытается
сделать push на githubat, что ж

27
00:01:39,090 --> 00:01:42,970
то, это действие будет отклонено (rejected)
потому, что как вы можете видеть,

28
00:01:42,970 --> 00:01:47,520
окончание его текущей ветки
находиться за окончанием
удалённой ветки.

29
00:01:47,520 --> 00:01:50,420
Итак, что нам нужно сделать тут,
так это просто можно сделать pull

30
00:01:50,420 --> 00:01:54,110
для начала, а затем push,
и это сработает.

31
00:01:54,110 --> 00:01:56,490
Важно знать, что там происходит
под капотом

32
00:01:56,490 --> 00:01:58,390
когда мы делаем эту самую команду pull.

33
00:01:58,390 --> 00:02:01,640
Итак, первое, что делает pull
он выбирает или синхронизурует

34
00:02:01,640 --> 00:02:04,630
наш локальный репозиторий с
удалённым.

35
00:02:04,630 --> 00:02:07,910
Это тоже самое, что и
сделать комманду git fetch.

36
00:02:07,910 --> 00:02:11,800
Короче в данном случае,
он скопирует commit Джейн

37
00:02:11,800 --> 00:02:12,820
в наш локальный репозиторий.

38
00:02:12,820 --> 00:02:15,550
Так иди иначе, это, в общем-то
не обновит наш

39
00:02:15,550 --> 00:02:16,250
локальный код.

40
00:02:16,250 --> 00:02:18,920
Если приоткрыть завесу тайны
то тут мы увидим, что

41
00:02:18,920 --> 00:02:23,810
в нашем локальном репозитории
на самом деле есть ветка
под названием origin master.

42
00:02:23,810 --> 00:02:25,680
Это наша удалённая ветка.

43
00:02:25,680 --> 00:02:28,720
И вот сейчас второй шаг с нашим pull
это то, что origin master

44
00:02:28,720 --> 00:02:31,190
соединится с master.

45
00:02:31,190 --> 00:02:35,200
Будет тоже самое, если запустить
git merge origin master.

46
00:02:35,200 --> 00:02:37,490
Итак, как вы видели на предыдущем уроке
когда вы пытаетесь соединить

47
00:02:37,490 --> 00:02:39,970
две разные ветки
у которых есть различия в commits

48
00:02:39,970 --> 00:02:43,590
это приведет к тому, что нас выбросит в
в редактор, где

49
00:02:43,590 --> 00:02:45,890
нам небходимо создать
как бы соединительный commit.

50
00:02:45,890 --> 00:02:48,430
В нашем случае, в сообщении говорится
что наша ветка соединяется (merge)

51
00:02:48,430 --> 00:02:51,510
master веткой из удалённого
репозитория.

52
00:02:51,510 --> 00:02:54,120
Сохранившись в редакторе
на покажут некую выдачу

53
00:02:54,120 --> 00:02:56,770
от pull комманды
и скажет нам, что

54
00:02:56,770 --> 00:02:59,130
было сделано рекурсивное слияние
(recursive merge).

55
00:02:59,130 --> 00:03:01,760
Если мы посмотрим на нашу линию времени (time line)
мы увидим, что у нас было

56
00:03:01,760 --> 00:03:06,220
две ветки, и соединились в этом
соединительном commit.

57
00:03:06,220 --> 00:03:09,590
Тут можно заметить, что хоть
у нас и есть это соединение локально

58
00:03:09,590 --> 00:03:13,270
и в нём всё ещё есть соединительный commit,
но origin master

59
00:03:13,270 --> 00:03:18,090
пока ещё не знает об изменениях,
которые сделал Грег и о
соединительном commit.

60
00:03:18,090 --> 00:03:22,130
И никогда не узнает
пока мы не сделаем git push.

61
00:03:22,130 --> 00:03:25,600
На данный моммент, origin master
установлена в той же точке что и

62
00:03:25,600 --> 00:03:29,470
master ветка и
всё было обновлено.

63
00:03:29,470 --> 00:03:31,100
И теперь, если заглянуть в log
мы увидим

64
00:03:31,100 --> 00:03:33,140
наш соединительный commit.

65
00:03:33,140 --> 00:03:36,870
Сейчас люди не особо любят
соединять commit.

66
00:03:36,870 --> 00:03:40,780
Некоторые считают, что загрязняют
наш репозиторий, загрязняют историю

67
00:03:40,780 --> 00:03:43,170
Потому, что если у вас много
сотрудников, то у вас

68
00:03:43,170 --> 00:03:46,100
может быть 10 изменений
и может 3 или 4 из них

69
00:03:46,100 --> 00:03:48,490
будут соединительными commit.

70
00:03:48,490 --> 00:03:50,200
Всё может стать очень неряшливым.

71
00:03:50,200 --> 00:03:52,760
И на следующих уровнях
мы будем говорить о реорганизации
(rebase)

72
00:03:52,760 --> 00:03:54,950
И это один из способов

73
00:03:54,950 --> 00:03:56,250
делать эти соединительные commit.

74
00:03:56,250 --> 00:03:58,900
Но пока что, давайте посмотрим
на другой сценарий.

75
00:04:01,770 --> 00:04:05,000
Итак, опять Грег и Джейн
работают над каким-нибудь кодом

76
00:04:05,000 --> 00:04:08,380
одновременно. И в одно и тоже время

77
00:04:08,380 --> 00:04:11,040
работают над одним и тем же readme файлом.

78
00:04:11,040 --> 00:04:14,330
Грег думает, что у нас нет пирожка,
А Джейн думает, что

79
00:04:14,330 --> 00:04:15,550
пирожок существует.

80
00:04:15,550 --> 00:04:17,620
И вот они оба редактируют
один и тот же файл.

81
00:04:17,620 --> 00:04:22,550
Джейн делает commit для своих изменений
и делает push на github, а Грег

82
00:04:22,550 --> 00:04:23,780
делает свой commit локально.

83
00:04:23,780 --> 00:04:26,700
Итак, сейчас как мы видим,
у нас всё ещё есть два разных commit

84
00:04:26,700 --> 00:04:29,030
одного и того же файла.

85
00:04:29,030 --> 00:04:30,640
Что же теперь должно произойти?

86
00:04:30,640 --> 00:04:32,360
Когда Грег сделает pull
произоуйдут две вещи.

87
00:04:32,360 --> 00:04:35,270
Запомните, эта комманда синхронизируется
с репозиторием,

88
00:04:35,270 --> 00:04:38,280
вытягивает все изменения, вытягивает
commit Джейн и

89
00:04:38,280 --> 00:04:39,810
затем пытается всё это дело соеденить.
(сделать merge)

90
00:04:39,810 --> 00:04:42,610
Но соединение не прошло удачно.

91
00:04:42,610 --> 00:04:44,480
У нас есть конфликт.

92
00:04:44,480 --> 00:04:46,990
Вот тут сказано, что
конфликт в readme файле.

93
00:04:46,990 --> 00:04:50,260
Что ж, мы собираемся отредактировать
этот readme, как только

94
00:04:50,260 --> 00:04:51,630
нас выбросило обратно в конмандную строку.

95
00:04:51,630 --> 00:04:55,650
Если мы проверим командой status, то увидим,
что да, необходимо

96
00:04:55,650 --> 00:04:58,720
отредактировать этот файл
и только потом соединить commit'ы.

97
00:04:58,720 --> 00:05:01,410
Итак, если мы перейдем в readme
на данном этапе мы

98
00:05:01,410 --> 00:05:03,340
сможем увидеть различия.

99
00:05:03,340 --> 00:05:06,110
Эти различия содержат
нашу локальную HEAD версию

100
00:05:06,110 --> 00:05:08,740
и мы видим версию Джейн.

101
00:05:08,740 --> 00:05:12,130
Нам нужно отредактировать этот файл
вручную, что бы всё исправить.

102
00:05:12,130 --> 00:05:15,660
Итак, мы собираемся стереть весь лишний
текст и сделать так

103
00:05:15,660 --> 00:05:18,770
что бы пирожка не было, потому что
так мы и думаем --

104
00:05:18,770 --> 00:05:20,000
ну вы понимаете, на самом деле нет никакого пирожка.

105
00:05:20,000 --> 00:05:23,740
Затем мы сделаем так:
git commit -a.

106
00:05:23,740 --> 00:05:25,490
Мы собираемся избавиться
от ненужных сообщений

107
00:05:25,490 --> 00:05:26,855
потому, что иначе
нас опять выкинет в редактор.

108
00:05:26,855 --> 00:05:30,240
Нам покажут нормальный commit
комментарий, и даже покажут

109
00:05:30,240 --> 00:05:32,640
список конфликтов
которые мы исправили.

110
00:05:32,640 --> 00:05:35,170
Сохранив это всё дело, наше дерево
опять выглядит так, как

111
00:05:35,170 --> 00:05:36,860
с нашим соединительным commit.
(merge commit)

112
00:05:36,860 --> 00:05:40,900
И когда мы сделаем push,
origin master ещё раз синхронизируется

113
00:05:40,900 --> 00:05:44,540
с нашим локальным репозиторием.

114
00:05:44,540 --> 00:05:46,200
Итак мы достигли конца
Четвертого Уровня и теперь вы

115
00:05:46,200 --> 00:05:51,020
знаете чуть больше о
соединении commit и конфликтах.

116
00:05:51,020 --> 00:05:53,160
И теперь самое время самостоятельно
разрешить пару собственных конфликтов

117
00:05:53,160 --> 00:05:54,540
в упражнениях.

