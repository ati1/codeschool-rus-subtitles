1
00:00:27,655 --> 00:00:29,750
Вы смотрите Git Real and
Пятый Уровень в котором поговорим

2
00:00:29,750 --> 00:00:34,540
об удалённых ветках и тэгах (tags/метки).

3
00:00:34,540 --> 00:00:36,360
На Третьем Уровне,
Оливер учил

4
00:00:36,360 --> 00:00:38,490
работать с локальными ветками.

5
00:00:38,490 --> 00:00:40,800
Но, что на счёт удалённых веток?

6
00:00:40,800 --> 00:00:42,650
Настанут такие времена,
когда у вас будут ветки

7
00:00:42,650 --> 00:00:45,290
ну, скажем, admin ветка, и вы захотите
что бы другие люди тоже

8
00:00:45,290 --> 00:00:46,240
могли с ними работать.

9
00:00:46,240 --> 00:00:49,070
Вам понадобиться
сделать push этой ветки

10
00:00:49,070 --> 00:00:52,070
удалённо, что бы другие люди
смогли скачать и поработать с ней,

11
00:00:52,070 --> 00:00:54,280
и продолжать работать
пока всё не будет готово

12
00:00:54,280 --> 00:00:56,600
к слиянию обратно в master ветку.

13
00:00:56,600 --> 00:00:59,500
Так же, будет хорошей практикой,
если работать над ней настолько долго

14
00:00:59,500 --> 00:01:02,870
что бы избежать лишних бэкапов.

15
00:01:03,470 --> 00:01:05,550
И, конечно, можно сделать бэкап
создав удалённую ветку

16
00:01:05,550 --> 00:01:06,750
и заливать в неё
на GitHub.

17
00:01:06,750 --> 00:01:09,850
В нашем случае, мы хотим начать
над корзиной товаров.

18
00:01:09,850 --> 00:01:12,560
Итак, мы создаем
ветку корзины товаров.

19
00:01:12,560 --> 00:01:16,770
И делаем push на GitHub,
пишем git push origin shopping_cart

20
00:01:18,110 --> 00:01:21,270
Это присоединит локальную ветку
с удалённой

21
00:01:21,270 --> 00:01:24,870
и начнё отслеживать её.

22
00:01:24,870 --> 00:01:26,480
Затем мы можем закончить
нашу работу над веткой.

23
00:01:26,480 --> 00:01:30,690
Мы добавим корзину, сделав commit.
 А затем сделаем push

24
00:01:30,690 --> 00:01:34,150
потому что это отслеживаемая ветка.
Система в курсе, что

25
00:01:34,150 --> 00:01:36,490
нужно локальную ветку shopping_cart
залить в удалённую

26
00:01:36,490 --> 00:01:39,130
ветку shopping_cart.

27
00:01:39,130 --> 00:01:41,620
Теперь, если мы зайдём на GitHub
и нажмем на вот эту кнопку

28
00:01:41,620 --> 00:01:44,740
мы увидим список всех веток.

29
00:01:44,740 --> 00:01:47,090
Всех удалённых веток,
прямо тут.

30
00:01:47,090 --> 00:01:50,410
Мы можем клинуть на shopping_cart
и мы можем посмотреть последний commit

31
00:01:50,410 --> 00:01:54,320
нашей ветки shopping_cart
 и всх остальных файлов.

32
00:01:54,320 --> 00:01:56,940
Итак мы создали ветку, залили её
на GitHub.

33
00:01:56,940 --> 00:01:59,820
И затем, может быть, я скажу своей
коллеге: "Эй Джейн, я тут начал

34
00:01:59,820 --> 00:02:01,680
удалённую ветку 
корзины товаров.

35
00:02:01,680 --> 00:02:04,060
Если хочешь над ней поработать,
можешь скачать её, не стесняйся."

36
00:02:04,060 --> 00:02:06,620
Итак, как вы думаете на это
будет выглядеть для Джейн?

37
00:02:06,620 --> 00:02:09,139
Чтож, в следующий раз, когда она сделает
pull, это покажет ей

38
00:02:09,139 --> 00:02:12,060
в выводе, что у нас есть
новая удалённая ветка
под названием

39
00:02:12,060 --> 00:02:13,852
shopping_cart.

40
00:02:13,852 --> 00:02:16,920
Если она выаолнит комманду git branch,
то для неё это ещё не будет локальной

41
00:02:16,920 --> 00:02:20,230
веткой. Но если она выполнит комманду
branch -r, то сможет

42
00:02:20,230 --> 00:02:22,140
видеть все
удалённые ветки.

43
00:02:22,140 --> 00:02:24,380
Он выполнит git checkout shopping_cart,
для того, что бы

44
00:02:24,380 --> 00:02:25,870
начать работать над веткой.

45
00:02:25,870 --> 00:02:29,570
И удалённая ветка
автоматически начнён отслеживаться.

46
00:02:29,570 --> 00:02:32,870
И теперь, она может делать свои изменения,
а когда закончит,

47
00:02:32,870 --> 00:02:36,570
она может сделать git push
этой удаленной ветке.

48
00:02:36,570 --> 00:02:38,410
Одна из самых полезных комманд
для работы с удалёнными ветками

49
00:02:38,410 --> 00:02:41,960
это комманда
 git remote show

50
00:02:41,960 --> 00:02:45,670
Так же, как и origin, конечно.
Это ведь наше удалённое имя.

51
00:02:45,670 --> 00:02:48,790
Итак, это всё для того, что бы показать
нам все удалённые ветки и

52
00:02:48,790 --> 00:02:50,230
отслеживаются они или нет.

53
00:02:50,230 --> 00:02:52,460
Это, так же, покажет нам
все локальные ветки

54
00:02:52,460 --> 00:02:54,140
которые были слиты с удалёнными.

55
00:02:54,140 --> 00:02:56,440
И, наконец, это покажет нам
кофигурацию локальных веток

56
00:02:56,440 --> 00:02:58,370
во время того, как мы делали git push.

57
00:02:58,370 --> 00:03:01,200
Круто, то, что
когда мы зайдём на сервер

58
00:03:01,200 --> 00:03:02,450
мы можем проверить на свежесть
любую нашу локальную ветку

59
00:03:03,740 --> 00:03:05,600
И в данном случае, мы видим, что
наша shopping_cart

60
00:03:05,600 --> 00:03:07,880
устарела.

61
00:03:07,880 --> 00:03:11,060
Удалённые ветки, как и локальные
не длятся вечно.

62
00:03:11,060 --> 00:03:12,660
Вы будущем вы можете
завершить работу с ними.

63
00:03:12,660 --> 00:03:15,120
Что бы стереть удалённую ветку
вам нужно выполнить
 git push origin colon

64
00:03:15,120 --> 00:03:18,890
и затем название ветки.

65
00:03:18,890 --> 00:03:21,570
Но это сотрёт только
удаленную ветку.

66
00:03:21,570 --> 00:03:23,760
У вас всё ущё будет
 локальная shopping_cart.

67
00:03:24,950 --> 00:03:27,550
И мы хотим стереть и её тоже
поэтому выполняем

68
00:03:27,550 --> 00:03:29,480
git branch -d shopping_cart.

69
00:03:29,480 --> 00:03:32,600
Ой, оно не позволяет нам
удалить эту ветку.

70
00:03:32,600 --> 00:03:34,330
Нам говорят, что тут есть
commit'ы, которые

71
00:03:34,330 --> 00:03:35,970
которые не были ни с чем слиты.

72
00:03:35,970 --> 00:03:37,760
Это крутая фишка  у Git.

73
00:03:37,760 --> 00:03:40,000
Если вы пытаетесь стереть ветку
и там есть commit'ы, которые

74
00:03:40,000 --> 00:03:42,910
никогда ни с чем не сливались,
тогда он скажет вам:

75
00:03:42,910 --> 00:03:45,210
"Ты стираешь изменения,
которые тебе, возможно, нужны"

76
00:03:45,210 --> 00:03:46,650
В общем он предупреждает вам.

77
00:03:46,650 --> 00:03:49,180
Но если вам действительно нужно
удалить эту ветку, вы можете

78
00:03:49,180 --> 00:03:52,260
поставить заглавную D
и он сотрёт ветку.

79
00:03:52,260 --> 00:03:55,540
Итак, Джейн, это тот человек, кто стёр
удалённый commit, но вот Грег

80
00:03:55,540 --> 00:03:57,730
это тот человек, который
его сперва создал.

81
00:03:57,730 --> 00:04:01,370
И что произойдёт, если он 
попытается сделать туда push

82
00:04:01,370 --> 00:04:03,260
а там, как бы, уже ничего и нет.

83
00:04:03,260 --> 00:04:04,730
Давайте посмотрим.

84
00:04:04,730 --> 00:04:06,700
Вот Грег работает
над этой веткой.

85
00:04:06,700 --> 00:04:10,790
Делает какой-нибудт commit, затем
мытается сделать push.

86
00:04:10,790 --> 00:04:14,040
Ничего не происходит, потому что
удалённая ветка не существует.

87
00:04:14,040 --> 00:04:16,700
Локально, это просто
какая-то удалённая ветка.

88
00:04:16,700 --> 00:04:19,720
Что бы выяснить в чём дело
Грег может выполнить

89
00:04:19,720 --> 00:04:21,040
git remote show origin.

90
00:04:21,040 --> 00:04:23,910
И тут он увидит, что
ветку shopping_cart

91
00:04:23,910 --> 00:04:25,380
кто-то спёр.

92
00:04:25,380 --> 00:04:27,670
Кто-то стёр её, ладно.

93
00:04:27,670 --> 00:04:31,160
Что бы удалить эту ссылку,
ему нужно выполнить

94
00:04:31,160 --> 00:04:35,200
git remote prune origin
о чём тут и говорится

95
00:04:35,200 --> 00:04:36,860
и это почистит все стёртые ветки.

96
00:04:36,860 --> 00:04:39,000
Это комманда, которую вы,
вероятно захотите выполнять

97
00:04:39,000 --> 00:04:41,980
время от времени, если работаете
над большим проектом, в котором

98
00:04:41,980 --> 00:04:44,490
много веток
периодически стираются.

99
00:04:44,490 --> 00:04:48,100
Это удалит
все ссылки на стёртые ветки.

100
00:04:48,100 --> 00:04:50,590
Давайте представим, что одна из наших
удалённых веток находится

101
00:04:50,590 --> 00:04:52,880
на сервере Heroku.

102
00:04:52,880 --> 00:04:55,420
Мы назвали это Heroku staging.

103
00:04:55,420 --> 00:05:00,430
Всё дело в том, что на Heroku
можно развернуть только

104
00:05:00,430 --> 00:05:03,300
master ветки.

105
00:05:03,300 --> 00:05:07,260
Поэтому если у нас есть, скажем,
staging ветка, и мы делаем

106
00:05:07,260 --> 00:05:11,880
git push Heroku staging staging,
то будет попытка сделать push

107
00:05:11,880 --> 00:05:15,900
удалённой ветки с именем staging
и ничего не будет

108
00:05:15,900 --> 00:05:19,340
деплоиться, потому что, 
как уже было сказано, Heroku

109
00:05:19,340 --> 00:05:21,120
смотрит только на
master ветки.

110
00:05:21,120 --> 00:05:23,070
Деплой происходит только
из мастер веток.

111
00:05:23,070 --> 00:05:25,850
В этом случае, мы выполним

112
00:05:25,850 --> 00:05:28,230
git push Heroku staging staging master.

113
00:05:28,230 --> 00:05:31,520
Это свяжет нашу локальну
staging ветку

114
00:05:31,520 --> 00:05:35,500
с master веткой в Heroku.

115
00:05:35,500 --> 00:05:38,610
Поэтому, когда мы сделаем такой push,
то произойдёт push из staging в

116
00:05:38,610 --> 00:05:40,770
master и всё это дело задеплоится.

117
00:05:40,770 --> 00:05:42,640
Итак сейчас мы говорили о
удалённых ветках. Теперь поговорим

118
00:05:42,640 --> 00:05:44,840
немного о tags (тэгах или метках)
прежде чем приступим

119
00:05:44,840 --> 00:05:46,150
к упражнениям.

120
00:05:46,150 --> 00:05:49,980
Tags это в основном ссылка
на определенный commit.

121
00:05:49,980 --> 00:05:54,240
Это хороший способ для кода перейти
перейти в прежнее состоянии

122
00:05:54,240 --> 00:05:55,680
в любой момент.

123
00:05:55,680 --> 00:05:58,480
Много людей, используют это
обозначения версии релиза.

124
00:05:58,480 --> 00:06:02,300
Итак, когда наш код в достаточно
приличном стостоянии, мы можем

125
00:06:02,300 --> 00:06:04,660
пометить его версией 0.1

126
00:06:04,660 --> 00:06:09,280
И что бы вывести список 
всех наших тэгов (пометок),
мы можем выполнить git tags.

127
00:06:09,280 --> 00:06:11,610
Что бы проверить этот tag
и откатиться к тому состоянию кода

128
00:06:11,610 --> 00:06:14,510
когда он был помечен,
сделайте git checkout, и

129
00:06:14,510 --> 00:06:15,850
затем имя этого tag.

130
00:06:15,850 --> 00:06:19,940
Что бы добавить новый tag, мы можем просто
сделать git tag -a, добавив

131
00:06:19,940 --> 00:06:22,480
имя тэга и затем
дать ему описание (tag description).

132
00:06:22,480 --> 00:06:25,590
И последнее. Что бы сделать push нашим тэгам
мы, по сути, должны выполнить

133
00:06:25,590 --> 00:06:29,690
push --tags, и это сделает push
на удалённый сервер.

134
00:06:29,690 --> 00:06:33,790
Иначе, тэги
останутся локальными.

135
00:06:33,790 --> 00:06:35,630
Теперь мы зайдём на GitHub
и кликнем на кнопку наших веток

136
00:06:35,630 --> 00:06:38,710
И вы увидите
вкладку с тэгами.

137
00:06:38,710 --> 00:06:41,470
Кликнув по ней
мы увидим список тэгов

138
00:06:41,470 --> 00:06:42,730
нашего текущего репозитория.

139
00:06:42,730 --> 00:06:45,840
Можем кликнуть по одному из них
и тогда попадём на страницу

140
00:06:45,840 --> 00:06:48,130
на которой можно посмотреть
состояние кода

141
00:06:48,130 --> 00:06:50,690
в момент присвоения тэга.

142
00:06:50,690 --> 00:06:52,230
Отлично, мы закончили
Пятый Уровень.

143
00:06:52,230 --> 00:06:54,680
Самое время вам сделать свой push
в каку-нибудь удалённую ветку

144
00:06:54,680 --> 00:06:55,670
и сделать несколько тэгов.

