1
00:00:27,600 --> 00:00:29,990
Вы смотрите Git Real, и это
шестой уровень,

2
00:00:29,990 --> 00:00:31,780
где мы будем говорить
о реорганизации (rebase).

3
00:00:31,780 --> 00:00:34,490
Итак, вы помните, на полшлом уровне
мы говорили, что

4
00:00:34,490 --> 00:00:36,790
слияние коммитов,
это не очень-то и хорошо.

5
00:00:36,790 --> 00:00:39,650
Мы соединяли коммиты
наших локальных веток с коммитами

6
00:00:39,650 --> 00:00:41,270
из удалённых веток.

7
00:00:41,270 --> 00:00:44,940
И это похоже,
портит вашу историю.

8
00:00:44,940 --> 00:00:45,850
Это плохо.

9
00:00:45,850 --> 00:00:49,170
Но есть альтернатива,
что бы это сделать. Это такие слияния

10
00:00:49,170 --> 00:00:51,080
со слияниями коммитов. И это непонятная фигня
называется rebase.

11
00:00:51,080 --> 00:00:54,310
Итак, давайте перейдём к сценарию
в котором мы были до этого,

12
00:00:54,310 --> 00:00:57,630
где у нас на GitHub были коммиты Джейн
которые отличались

13
00:00:57,630 --> 00:00:59,920
от локальных коммитов Грега.

14
00:00:59,920 --> 00:01:03,290
Итак вместо того, что бы делать pull и push,
мы сделаем fetch,

15
00:01:03,290 --> 00:01:04,540
а потом rebase.

16
00:01:04,540 --> 00:01:07,620
Итак, как вы помните, когда
мы делаем fetch, всё попадает на GitHub

17
00:01:07,620 --> 00:01:10,960
и это сносит все изменения,
но не делает слияний.

18
00:01:10,960 --> 00:01:13,280
Итак, если мы взглянем на нашу
текущую ветку, она будет выглядеть

19
00:01:13,280 --> 00:01:14,260
примерно как тут.

20
00:01:14,260 --> 00:01:16,300
У нас есть master и
origin master.

21
00:01:16,300 --> 00:01:18,310
Git rebase делает три вещи.

22
00:01:18,310 --> 00:01:21,710
Первая, это переносит все изменения
в master, которых нет

23
00:01:21,710 --> 00:01:22,980
в origin master.

24
00:01:22,980 --> 00:01:25,840
Итак коммиты Грега
переместятся

25
00:01:25,840 --> 00:01:27,610
во временную зону.

26
00:01:27,610 --> 00:01:31,310
Затем запустятся все
коммиты origin master

27
00:01:31,310 --> 00:01:32,640
по одному за раз.

28
00:01:32,640 --> 00:01:33,310
И вот тут это всё и происходит.

29
00:01:33,310 --> 00:01:34,910
Мы запустили коммит
на master ветке.

30
00:01:34,910 --> 00:01:37,530
И потом третий шаг. Запустятся
все коммиты

31
00:01:37,530 --> 00:01:42,430
из временной зоны, которые находятся
на самом верху master ветки.
По одному за раз.

32
00:01:42,430 --> 00:01:43,710
Вот так просто.

33
00:01:43,710 --> 00:01:46,050
Сейчас, как вы заметили,
тут нет слитых коммитов.

34
00:01:46,050 --> 00:01:50,990
Тут они идут просто один за другим, один за другим

35
00:01:50,990 --> 00:01:52,840
На Третьем Уровне мы
первым делом узнал о локальных ветках

36
00:01:52,840 --> 00:01:56,130
Помните, что у нас была
ветка admin, и затем нам пришлось откатиться

37
00:01:56,130 --> 00:01:58,070
и исправить несколько багов
на master ветке.

38
00:01:58,070 --> 00:02:01,150
И потом мы присоединили
admin к master.

39
00:02:01,150 --> 00:02:05,130
Что ж, как мы можем сделать rebase
вместо слияния?

40
00:02:05,130 --> 00:02:08,330
Ну, во-первых мы можем
проверить admin ветку

41
00:02:08,330 --> 00:02:11,790
и затем выполнить
git rebase master.

42
00:02:11,790 --> 00:02:14,190
Это сперва сделает master коммиты,
что в свою очередь

43
00:02:14,190 --> 00:02:16,930
дополнительно выполнит
наши admin коммиты.

44
00:02:16,930 --> 00:02:20,030
Следующим шагом будет
проверка master ветки, а затем

45
00:02:20,030 --> 00:02:24,200
merge из admin
обратно в master.

46
00:02:24,200 --> 00:02:27,260
Эти действия приведут к
к той самой быстрой прокрутке вперёд

47
00:02:27,260 --> 00:02:27,950
о которой мы говорили.

48
00:02:27,950 --> 00:02:30,220
В общем, это просто выполнит
 те же самые коммиты один за другим

49
00:02:30,220 --> 00:02:33,200
и ещё один за другим.
И теперь мы готовы двигаться дальше.

50
00:02:33,200 --> 00:02:34,760
Даже если мы делаем
rebase, мы всё ещё можем

51
00:02:34,760 --> 00:02:35,940
получить конфилкты.

52
00:02:35,940 --> 00:02:38,460
Поэтому давайте взглянем
на ситуацию при конфликте.

53
00:02:38,460 --> 00:02:41,260
Как вы можете видеть, на
GitHub у нас есть экстра коммит

54
00:02:41,260 --> 00:02:42,610
который мы делали и локально.

55
00:02:42,610 --> 00:02:45,180
И эти два экстра коммита
модифицируют

56
00:02:45,180 --> 00:02:47,570
один и тот же readme файл.

57
00:02:47,570 --> 00:02:48,420
Окей.

58
00:02:48,420 --> 00:02:52,770
Итак, шаг первый. Делаем перенос
из GitHub.

59
00:02:52,770 --> 00:02:55,110
Шаг второй, мы выполняем git rebase.

60
00:02:55,110 --> 00:02:56,780
Это возтмёт себе все новые коммиты
из master,

61
00:02:56,780 --> 00:02:59,450
и помещает их во
временную зону.

62
00:02:59,450 --> 00:03:02,710
Затем выполнятся все
 из origin master коммитов.

63
00:03:02,710 --> 00:03:04,750
И затем наконец,
выполнятся все коммиты из

64
00:03:04,750 --> 00:03:07,630
временной зоны по одному за раз,
 что, конечно же,

65
00:03:07,630 --> 00:03:09,420
приведет к конфликтам.

66
00:03:09,420 --> 00:03:12,260
Итак, тут вы видите, как делается
rebase и попадает в конфликт.

67
00:03:12,260 --> 00:03:15,890
Вы можете видеть, как нас просят
исправить конфликты при мёрдже

68
00:03:15,890 --> 00:03:20,170
readme.txt, и когда мы разрулим
все проблемы, то запустим

69
00:03:20,170 --> 00:03:21,550
git rebase --continue.

70
00:03:21,550 --> 00:03:24,160
Однако, Если мы захотим пропустить
патч, мы выполним

71
00:03:24,160 --> 00:03:24,840
git rebase skip.

72
00:03:24,840 --> 00:03:28,120
Или, если мы захотим откатиться и
и сделаем вид, что не делали rebased

73
00:03:28,120 --> 00:03:30,870
мы можем просто сделать вот так
git rebase abort.

74
00:03:30,870 --> 00:03:33,180
Если мы запустим git status, мы увидим
что мы не находимся ни на какой

75
00:03:33,180 --> 00:03:34,330
конкретной ветке.

76
00:03:34,330 --> 00:03:35,760
Мы в середине
нашего rebase.

77
00:03:35,760 --> 00:03:39,290
Итак, после редактирования readme,
мы сделаем git add readme.

78
00:03:39,290 --> 00:03:42,050
Затем напечатаем 
git rebase --continue, и продолжим

79
00:03:42,050 --> 00:03:43,030
применять коммиты.

80
00:03:43,030 --> 00:03:45,410
Если мы обратим внимание на 
комментарии к коммитам,

81
00:03:45,410 --> 00:03:46,940
то они будут выглядеть примерно как вот эти.

82
00:03:46,940 --> 00:03:50,820
Итак ещё раз, вы видите
что тут нет конфликтов мёрджей.

83
00:03:50,820 --> 00:03:55,240
Они просто идут один за другим
и выглядят достаточно чисто.

84
00:03:55,240 --> 00:03:57,740
Не скажу, что такой rebase
годится на все случаи жизни.

85
00:03:57,740 --> 00:03:59,820
Иногда вы захотите сделать
rebase, иногда, может быть, захотите

86
00:03:59,820 --> 00:04:00,920
сделать мёрдж.

87
00:04:00,920 --> 00:04:02,860
Если вы имеете дело с веткой
достаточно долгое время

88
00:04:02,860 --> 00:04:05,510
и в которой много изменений,
скорее всего вы захотите

89
00:04:05,510 --> 00:04:07,200
сделать мёрдж, а не rebase.

90
00:04:07,200 --> 00:04:10,690
Это тот путь, на котором вы точно знаете
что можно откатить мёрдж

91
00:04:10,690 --> 00:04:15,790
и у вас есть логи всех изменений
в этом мёрдже

92
00:04:15,790 --> 00:04:17,880
на тот момент когда он будет выполнен.

93
00:04:17,880 --> 00:04:18,470
Ага.

94
00:04:18,470 --> 00:04:20,310
Итак, пришла ваша очередь
заморать руки

95
00:04:20,310 --> 00:04:22,330
и сделать rebasing.

